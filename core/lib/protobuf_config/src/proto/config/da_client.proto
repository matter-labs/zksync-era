syntax = "proto3";

package zksync.config.da_client;

import "zksync/config/object_store.proto";

message AvailConfig {
  optional string bridge_api_url = 2;
  oneof config {
    AvailClientConfig full_client = 7;
    AvailGasRelayConfig gas_relay = 8;
  }
  optional uint64 timeout_ms = 9;

  reserved 1; reserved "api_node_url";
  reserved 3; reserved "seed";
  reserved 4; reserved "app_id";
  reserved 5; reserved "timeout";
  reserved 6; reserved "max_retries";
}

message AvailClientConfig {
  optional string api_node_url = 1;
  optional uint32 app_id = 2;
  optional string finality_state = 3;
}

message AvailGasRelayConfig {
  optional string gas_relay_api_url = 1;
  optional uint64 max_retries = 2;
}

message CelestiaConfig {
  optional string api_node_url = 1;
  optional string namespace = 2;
  optional string chain_id = 3;
  optional uint64 timeout_ms = 4;
}

message Url {
  optional string g1_url = 1;
  optional string g2_url = 2;
}

message EigenConfig {
  optional string disperser_rpc = 3;
  optional uint32 settlement_layer_confirmation_depth = 4;
  optional string eigenda_eth_rpc = 5;
  optional string eigenda_svc_manager_address = 6;
  optional bool wait_for_finalization = 7;
  optional bool authenticated = 8;
  oneof points_source {
    string points_source_path = 9;
    Url points_source_url = 10;
  }
  reserved 1,2;
  reserved "rpc_node_url","inclusion_polling_interval_ms";
}

message NoDAConfig {}

message DataAvailabilityClient {
  // oneof in protobuf allows for None
  oneof config {
    AvailConfig avail = 1;
    object_store.ObjectStore object_store = 2;
    CelestiaConfig celestia = 3;
    EigenConfig eigen = 4;
    NoDAConfig no_da = 5;
  }
}
