name: Core tests

# ================================================================
#                Core Workspace Testing Workflow
#
# Runs unit, load and integration tests for the `core` workspace.
# ================================================================

# Set proper subset of permissions
permissions:
  contents: read
  pull-requests: write

# Define the events that triggers the workflow
on:
#  pull_request:
#    paths:
#      # Workspaces
#      - 'core/**'
#      - 'zkstack_cli/**'
#      # Docker files
#      - 'docker/contract-verifier/**'
#      - 'docker/external-node/**'
#      - 'docker/server/**'
#      # CI scripts
#      - '.github/workflows/core.yaml'
#      - '.github/workflows/build-core-template.yml'              # TODO: check name after refactoring
#      - '.github/workflows/build-contract-verifier-template.yml' # TODO: check name after refactoring
#      # Exclude markdown files
#      - '!**/*.md'
#      - '!**/*.MD'
  merge_group:
  # Special schedule to check for integration tests flakiness
  schedule:
    - cron: '0 23 * * *' # each day at 11 PM GMT

# Cancel previous runs for PRs if new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Set default shell for all steps
defaults:
  run:
    shell: 'bash -ex {0}'

jobs:

  # ===============================================================
  #          Aux job to check changes in `core` workspace
  #
  # Auxiliary job to check if there are any changes in the core
  # workspace because merge_group cannot be filtered by path.
  # https://github.com/orgs/community/discussions/45899
  #
  # We have to duplicate filters here and on top of the workflow.
  # ===============================================================
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      any_changed: ${{ steps.files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          submodules: "false"

      - uses: tj-actions/changed-files@2f7c5bfce28377bc069a65ba478de0a74aa0ca32 # v46.0.1
        id: files
        with:
          fetch_additional_submodule_history: true
          files: |
            core/**
            zkstack_cli/**
            docker/contract-verifier/**
            docker/external-node/**
            docker/server/**
            .github/workflows/core.yaml
            .github/workflows/build-core-template.yml
            .github/workflows/build-contract-verifier-template.yml
            !**/*.md
            !**/*.MD


  # =================================================
  #          Unit Tests for `core` workspace
  #
  # Runs cargo nextest in CI environment.
  # =================================================
#  unit-tests:
#    name: Unit tests
#    runs-on: matterlabs-ci-runner-highmem-long
#    needs: changed-files
#    if: ${{ needs.changed-files.outputs.any_changed == 'true' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          submodules: "recursive"
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'core'       # Use core workspace cache setup
#          cache_shared_key: 'dev' # Use `dev` profile cache to significantly speed up the build
#
#      # Download prebuilt contracts version if exists, otherwise build them
#      - name: Setup contracts
#        uses: matter-labs/zksync-ci-common/.github/actions/build-contracts@aba-ci-optimize
#
#      # Only reth is required for the unit tests
#      # postgres is started automatically by `zkstack dev test rust` step below
#      - name: Start services
#        run: docker-compose up -d --wait reth
#
#      - name: Unit tests
#        run: zkstack dev test rust


  # ==========================================
  #        Load tests for `core` workspace
  #
  # Setup legacy chain, initialize ecosystem,
  # run load tests for old and new VMs.
  # ==========================================
#  load-test:
#    name: Load test ${{ matrix.vm_mode }}
#    runs-on: matterlabs-ci-runner-high-performance
#    needs: changed-files
#    if: ${{ needs.changed-files.outputs.any_changed == 'true' }}
#    strategy:
#      fail-fast: false
#      matrix:
#        vm_mode:
#          - "old"
#          - "new"
#    env:
#      EXPECTED_TX_COUNT: ${{ matrix.vm_mode == 'new' && 30000 || 16000 }}
#      ACCOUNTS_AMOUNT: 100
#      MAX_INFLIGHT_TXS: 10
#      SYNC_API_REQUESTS_LIMIT: 15
#      FAIL_FAST: true
#      SERVER_LOG: server.log
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          submodules: "recursive"
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'core'           # Use core workspace cache setup
#          cache_shared_key: 'release' # Use `release` profile cache for load tests
#
#      # Download prebuilt contracts version if exists, otherwise build them
#      - name: Build contracts
#        uses: matter-labs/zksync-ci-common/.github/actions/build-contracts@aba-ci-optimize
#
#      - name: Start services
#        run: docker compose up --wait postgres reth
#
#      - name: Create legacy chain
#        run: |
#          zkstack chain create \
#            --chain-name legacy \
#            --chain-id sequential \
#            --prover-mode no-proofs \
#            --wallet-creation localhost \
#            --l1-batch-commit-data-generator-mode rollup \
#            --base-token-address 0x0000000000000000000000000000000000000001 \
#            --base-token-price-nominator 1 \
#            --base-token-price-denominator 1 \
#            --set-as-default false \
#            --ignore-prerequisites \
#            --legacy-bridge \
#            --evm-emulator false
#
#      - name: Build server
#        run: zkstack server build --release --uring --verbose
#
#      - name: Init ecosystem
#        run: |
#          zkstack ecosystem init \
#            --server-command './core/target/release/zksync_server' \
#            --ignore-prerequisites \
#            --dev --skip-contract-compilation-override \
#            --support-l2-legacy-shared-bridge-test=true \
#            --verbose
#
#      - name: Update config
#        run: |
#          zkstack dev config-writer \
#            --ignore-prerequisites \
#            --path ${{ format('etc/env/file_based/overrides/tests/loadtest-{0}.yaml', matrix.vm_mode) }} \
#            --chain legacy
#
#      - name: Run server
#        run: |
#          zkstack server run \
#            --server-command './core/target/release/zksync_server' \
#            --ignore-prerequisites --chain=legacy &>${SERVER_LOG} &
#
#      - name: Wait for server to start
#        run: zkstack server wait --chain=legacy --timeout 300 --poll-interval 1000
#
#      - name: Perform load test
#        run: zkstack dev test loadtest -v --chain=legacy
#
#      - name: Show server logs
#        if: failure()
#        run: cat ${SERVER_LOG}

  # =========================================================
  #              VM performance comparison job
  #
  # Compares VM performance with base branch.
  # If regression is found, it is reported in PR comment.
  # =========================================================
#  vm-perf-comparison:
#    name: VM performance check
#    runs-on: matterlabs-ci-runner-highmem-long
#    needs: changed-files
#    if: ${{ github.event_name == 'pull_request' && needs.changed-files.outputs.any_changed == 'true' }}
#    permissions:
#      contents: read
#      pull-requests: write
#    env:
#      BENCHMARK_DIFF_THRESHOLD_PERCENT: 2
#    steps:
#      - name: Checkout base branch
#        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
#        with:
#          submodules: "recursive"
#          ref: ${{ github.base_ref }}
#
#      - name: Fetch PR branch
#        run: |
#          git remote add pr_repo ${{ github.event.pull_request.head.repo.clone_url }}
#          git fetch pr_repo ${{ github.event.pull_request.head.ref }}
#
#      - name: Fetch merge-base SHA
#        id: merge_base
#        run: echo "sha=$(git merge-base HEAD FETCH_HEAD)" >> "${GITHUB_OUTPUT}"
#
#      - name: Checkout divergence point
#        run: git checkout ${{ steps.merge_base.outputs.sha }} --recurse-submodules
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'core'           # Use core workspace cache setup
#          cache_shared_key: 'bench'   # Use `bench` profile for benchmarks
#          setup_valgrind: 'true'
#
#      # Download prebuilt contracts version if exists, otherwise build them
#      - name: Build contracts
#        uses: matter-labs/zksync-ci-common/.github/actions/build-contracts@aba-ci-optimize
#
#      - name: run benchmarks on base branch
#        working-directory: core
#        run: |
#          cargo bench --package vm-benchmark --bench instructions -- --verbose
#          cargo run --package vm-benchmark --profile bench --bin instruction_counts | tee base-opcodes
#
#      - name: Checkout PR
#        run: |
#          git checkout --force FETCH_HEAD --recurse-submodules
#          git submodule update --init --recursive
#
#      - name: Run benchmarks on PR
#        working-directory: core
#        run: |
#          cargo bench --package vm-benchmark --bench instructions -- --verbose
#          cargo bench --package vm-benchmark --bench instructions -- --print > instructions.log 2>/dev/null
#
#      - name: Compare results
#        id: comparison
#        working-directory: core
#        run: |
#          # Output all lines from the benchmark result starting from the "## ..." comparison header.
#          # Since the output spans multiple lines, we use a heredoc declaration.
#          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
#          echo "speedup<<$EOF" >> $GITHUB_OUTPUT
#          sed -n '/^## /,$p' instructions.log >> $GITHUB_OUTPUT
#          echo "$EOF" >> $GITHUB_OUTPUT
#
#          cargo run --package vm-benchmark --profile bench --bin instruction_counts -- --diff base-opcodes > opcodes.log
#          echo "opcodes<<$EOF" >> $GITHUB_OUTPUT
#          sed -n '/^## /,$p' opcodes.log >> $GITHUB_OUTPUT
#          echo "$EOF" >> $GITHUB_OUTPUT
#
#      - name: Comment on PR
#        uses: thollander/actions-comment-pull-request@fabd468d3a1a0b97feee5f6b9e499eab0dd903f6 # v2.5.0
#        if: steps.comparison.outputs.speedup != '' || steps.comparison.outputs.opcodes != ''
#        with:
#          message: |
#            ${{ steps.comparison.outputs.speedup }}
#            ${{ steps.comparison.outputs.opcodes }}
#          comment_tag: vm-performance-changes
#          mode: recreate
#          create_if_not_exists: true
#
#      - name: Remove PR comment
#        uses: thollander/actions-comment-pull-request@fabd468d3a1a0b97feee5f6b9e499eab0dd903f6 # v2.5.0
#        if: steps.comparison.outputs.speedup == '' && steps.comparison.outputs.opcodes == ''
#        with:
#          comment_tag: vm-performance-changes
#          message: 'No performance difference detected (anymore)'
#          mode: delete

  # ==============================================
  #    Integration tests for `core` workspace
  #
  # Setup legacy chain, initialize ecosystem and
  # run TS integration tests for multiple chains.
  # ==============================================
#  integration-tests:
#    runs-on: matterlabs-ci-runner-ultra-performance
#    needs: changed-files
#    if: ${{ needs.changed-files.outputs.any_changed == 'true' || github.event_name == 'schedule' }}
#    env:
#      ZKSYNC_HOME: ${{ github.workspace }}
#      L1_RPC_URL: "http://localhost:8545"
#      SERVER_DB_URL: "postgres://postgres:notsecurepassword@localhost:5432"
#      DEFAULT_SERVER_COMPONENTS: "api,tree,eth,state_keeper,housekeeper,commitment_generator,da_dispatcher,vm_runner_protective_reads"
#    strategy:
#      matrix:
#        use_gateway_chain:
#          - "WITH_GATEWAY"
#          - "WITHOUT_GATEWAY"
#      fail-fast: false
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: "recursive"
#
#      - name: Setup runner
#        uses: matter-labs/zksync-ci-common/.github/actions/runner-setup@aba-ci-optimize
#        with:
#          workspace: 'core'
#          cache_shared_key: 'release'
#
#      - name: Build contracts
#        uses: matter-labs/zksync-ci-common/.github/actions/build-contracts@aba-ci-optimize
#
#      - name: Start services
#        run: docker compose up --wait postgres reth
#
#      - name: Set up logs directories
#        run: |
#          LOG_DIRS=(
#            "SERVER_LOGS_DIR=logs/server"
#            "INTEGRATION_TESTS_LOGS_DIR=logs/integration_tests"
#            "INTEGRATION_TESTS_EN_LOGS_DIR=logs/integration_tests/en"
#            "SNAPSHOT_RECOVERY_LOGS_DIR=logs/snapshot_recovery"
#            "GENESIS_RECOVERY_LOGS_DIR=logs/genesis_recovery"
#            "EXTERNAL_NODE_LOGS_DIR=logs/external_node"
#            "FEES_LOGS_DIR=logs/fees"
#            "REVERT_LOGS_DIR=logs/revert"
#          )
#          for DIR in "${LOG_DIRS[@]}"; do
#            mkdir -p "${DIR#*=}"
#            echo "${DIR}" >> "${GITHUB_ENV}"
#          done
#
#      - name: Build tested binaries
#        run: |
#          zkstack server build --verbose
#          zkstack external-node build --verbose
#          zkstack contract-verifier build --verbose
#
#      - name: Init chains
#        run: ./.github/scripts/init_chains.sh "${{ matrix.use_gateway_chain }}"
#
#      - name: Build test dependencies
#        run: zkstack dev test build
#
#      - name: Init contract verifier
#        run: |
#          zkstack contract-verifier init \
#            --zksolc-version=v1.5.10 --solc-version=0.8.26 \
#            --vyper-version=v0.3.10 --zkvyper-version=v1.5.4 \
#            --era-vm-solc-version=0.8.26-1.0.1 --only --chain era
#          for chain in era validium custom_token consensus; do
#            zkstack contract-verifier run --chain "${chain}" &> "${SERVER_LOGS_DIR}/contract-verifier-${chain}.log" &
#            zkstack contract-verifier wait --chain "${chain}" --verbose
#          done
#
#      - name: Run servers
#        run: |
#          for chain in era validium; do
#            zkstack dev config-writer --path etc/env/file_based/overrides/tests/integration.yaml --chain "${chain}"
#          done
#          for chain in era validium custom_token consensus; do
#            log_file="${SERVER_LOGS_DIR}/${chain}.log"
#            if [[ "${chain}" == "consensus" ]]; then
#              components="--components=${DEFAULT_SERVER_COMPONENTS},vm_runner_bwip,vm_playground,consensus"
#            else
#              components=""
#            fi
#            zkstack server --server-command './core/target/release/zksync_server' \
#              --ignore-prerequisites --chain "${chain}" $components &> "${log_file}" &
#          done
#          for chain in era validium custom_token consensus; do
#            zkstack server wait --timeout 300 --ignore-prerequisites --verbose --chain "${chain}"
#          done
#
#      - name: Set up attester committee for the consensus chain
#        run: |
#          zkstack consensus wait-for-registry --ignore-prerequisites --verbose --chain consensus
#          zkstack consensus set-attester-committee --chain consensus \
#            --ignore-prerequisites --verbose --from-genesis &> ${INTEGRATION_TESTS_LOGS_DIR}/consensus.log
#
#      - name: Run integration tests
#        env:
#          RUN_CONTRACT_VERIFICATION_TEST: true
#        run: |
#          ./bin/run_on_all_chains.sh \
#            "zkstack dev test integration --no-deps --ignore-prerequisites" \
#            "${CHAINS}" "${INTEGRATION_TESTS_LOGS_DIR}"
#
#      - name: Repeat integration tests on push to main to check for flakiness
#        env:
#          RUN_CONTRACT_VERIFICATION_TEST: true
#        if: ${{ github.ref == 'refs/heads/main' }}
#        run: |
#          for i in {1..10}; do
#            echo "Iteration $i"
#            mkdir -p "${INTEGRATION_TESTS_LOGS_DIR}/${i}"
#            ./bin/run_on_all_chains.sh \
#              "zkstack dev test integration --no-deps --ignore-prerequisites" \
#              "${CHAINS}" "${INTEGRATION_TESTS_LOGS_DIR}/${i}"
#          done
#
#      - name: Init external nodes
#        run: |
#          if [[ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]]; then
#            GATEWAY_RPC_URL="--gateway-rpc-url=http://localhost:3550"
#          fi
#          chains=("era" "validium" "custom_token" "consensus")
#          for chain in "${chains[@]}"; do
#            zkstack external-node configs --chain "${chain}" \
#              --db-url="${SERVER_DB_URL}" \
#              --db-name="zksync_en_localhost_${chain}" \
#              --l1-rpc-url="${L1_RPC_URL}" ${GATEWAY_RPC_URL}
#            zkstack external-node init --ignore-prerequisites --chain "${chain}"
#          done
#
#      - name: Run recovery tests (from snapshot)
#        run: |
#          ./bin/run_on_all_chains.sh \
#            "zkstack dev test recovery --snapshot --no-deps --ignore-prerequisites --verbose" \
#            "${CHAINS}" "${INTEGRATION_TESTS_LOGS_DIR}"
#
#      - name: Run recovery tests (from genesis)
#        run: |
#          ./bin/run_on_all_chains.sh \
#            "zkstack dev test recovery --no-deps --no-kill --ignore-prerequisites --verbose" \
#            "${CHAINS}" "${INTEGRATION_TESTS_LOGS_DIR}"
#
#      - name: Run external nodes
#        run: |
#          declare -A chain_options=(
#            [era]=""
#            [validium]="--components all,da_fetcher"
#            [custom_token]=""
#            [consensus]="--enable-consensus"
#          )
#          for chain in "${!chain_options[@]}"; do
#            log_file="${EXTERNAL_NODE_LOGS_DIR}/${chain}.log"
#            zkstack external-node run --ignore-prerequisites --chain "$chain" ${chain_options[$chain]} &> "${log_file}" &
#          done
#          for chain in "${!chain_options[@]}"; do
#            zkstack external-node wait --ignore-prerequisites --verbose --chain "${chain}"
#          done
#
#      - name: Run integration tests en
#        env:
#          RUN_CONTRACT_VERIFICATION_TEST: false
#        run: |
#          ./bin/run_on_all_chains.sh \
#            "zkstack dev test integration --no-deps --ignore-prerequisites --external-node" \
#            "${CHAINS}" "${INTEGRATION_TESTS_LOGS_DIR}"
#
#      - name: Repeat integration tests daily to check for flakiness
#        if: ${{ github.event_name == 'schedule' }}
#        run: |
#          for i in {1..10}; do
#            echo "Iteration $i"
#            mkdir -p "${INTEGRATION_TESTS_LOGS_DIR}/${i}"
#            ./bin/run_on_all_chains.sh \
#              "zkstack dev test integration --no-deps --ignore-prerequisites --external-node" \
#              "${CHAINS}" "${INTEGRATION_TESTS_LOGS_DIR}/${i}"
#          done
#
#      - name: Fee projection tests
#        run: |
#          killall -INT zksync_server --wait || true
#          # Only start & wait for the gateway server if use_gateway_chain == WITH_GATEWAY
#          if [ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]; then
#            zkstack server --server-command './core/target/release/zksync_server' \
#              --ignore-prerequisites --chain gateway &> "${SERVER_LOGS_DIR}/gateway.log" &
#            zkstack server wait --timeout 300 --ignore-prerequisites --verbose --chain gateway
#          fi
#          # Always run the chain-specific fee tests
#          ./bin/run_on_all_chains.sh \
#            "zkstack dev test fees --no-deps --no-kill" \
#            "${CHAINS}" "${FEES_LOGS_DIR}"
#
#      - name: Repeat fee projection tests on push to main to check for flakiness
#        if: ${{ github.event_name == 'schedule' }}
#        run: |
#          for i in {1..10}; do
#            echo "Iteration $i"
#            mkdir -p ${{ env.FEES_LOGS_DIR }}/$i
#            ./bin/run_on_all_chains.sh \
#              "zkstack dev test fees --no-deps --no-kill" \
#              "${CHAINS}" "${FEES_LOGS_DIR}/${i}"
#          done
#
#      - name: Revert tests
#        run: |
#          killall -INT zksync_server --wait || true
#          killall -INT zksync_external_node --wait || true
#          # Only start & wait for the gateway server if use_gateway_chain == WITH_GATEWAY
#          if [ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]; then
#            zkstack server --server-command './core/target/release/zksync_server' \
#              --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
#            zkstack server wait --timeout 300 --ignore-prerequisites --verbose --chain gateway
#          fi
#          # Always run the chain-specific revert tests
#          ./bin/run_on_all_chains.sh \
#            "zkstack dev test revert --no-deps --external-node --no-kill --ignore-prerequisites" \
#            "${CHAINS}" "${INTEGRATION_TESTS_LOGS_DIR}"
#
#      # Upgrade tests should run last, because as soon as they
#      # finish the bootloader will be different
#      # TODO make upgrade tests safe to run multiple times
#      - name: Upgrade tests
#        run: |
#          killall -INT zksync_server --wait || true
#          # Only start & wait for the gateway server if use_gateway_chain == WITH_GATEWAY
#          if [ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]; then
#            zkstack server --server-command './core/target/release/zksync_server' \
#              --ignore-prerequisites --chain gateway &> "${SERVER_LOGS_DIR}/gateway.log" &
#            zkstack server wait --timeout 300 --ignore-prerequisites --verbose --chain gateway
#          fi
#          # Always run the upgrade test against era
#          zkstack dev test upgrade --no-deps --chain era
#
#      - name: Upload logs
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: logs_${{ matrix.use_gateway_chain }}
#          path: logs


  # ====================================================================
  #                GitHub required status check job
  #
  # Special job that allows some of the jobs to be skipped or failed
  # requiring others to be successful.
  # This is used to block PRs from merging without passing CI.
  # ====================================================================
#  ci-success:
#    name: Github Status Check
#    runs-on: ubuntu-latest
#    if: always() && !cancelled()
#    needs:
#      - unit-tests
#      - load-test
#      - integration-tests
#    steps:
#      - name: Status
#        run: |
#          # This will check all jobs status in the `needs` list, and fail job if one is failed.
#          if [[ ${{ contains(join(needs.*.result, ','), 'failure') }} == "true" ]]; then
#            echo "Intentionally failing to block PR from merging"
#            exit 1
#          fi
