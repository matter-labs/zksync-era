syntax = "proto3";

package zksync.dal;

message Payload {
  // zksync-era ProtocolVersionId
  optional uint32 protocol_version = 9; // required; u16
  optional bytes hash = 1; // required; H256
  optional uint32 l1_batch_number = 2; // required
  optional uint64 timestamp = 3; // required; seconds since UNIX epoch
  optional uint64 l1_gas_price = 4; // required; gwei
  optional uint64 l2_fair_gas_price = 5; // required; gwei
  optional uint64 fair_pubdata_price = 11; // required since 1.4.1; gwei
  optional uint32 virtual_blocks = 6; // required
  optional bytes operator_address = 7; // required; H160
  repeated Transaction transactions = 8;
  optional bool last_in_batch = 10; // required
}

message Transaction {
  reserved 5;
  reserved "received_timestamp_ms";
  oneof common_data {
    L1TxCommonData l1 = 1;
    L2TxCommonData l2 = 2;
    ProtocolUpgradeTxCommonData protocol_upgrade = 3;
  }
  optional Execute execute = 4; // required
  optional bytes raw_bytes = 6; // optional
}

message L1TxCommonData {
  optional bytes sender_address = 1; // required; H160
  optional uint64 serial_id = 2; // required
  optional bytes layer_2_tip_fee = 4; // required; U256
  optional bytes full_fee = 5; // required; U256
  optional bytes max_fee_per_gas = 6; // required; U256
  optional bytes gas_limit = 7; // required; U256
  optional bytes gas_per_pubdata_limit = 8; // required; U256
  optional uint32 op_processing_type = 9; // required
  optional uint32 priority_queue_type = 10; // required; U256

  optional bytes canonical_tx_hash = 13; // // required; H256
  optional bytes to_mint = 14; // required; U256
  optional bytes refund_recipient_address = 15; // required; H160

  // deprecated.
  optional uint64 deadline_block = 3; // required; constant = 0
  optional bytes eth_hash = 11; // required; constant = [0;32]
  optional uint64 eth_block = 12; // required
}

message L2TxCommonData {
  optional uint32 nonce = 1; // required
  optional bytes gas_limit = 2; // required; U256
  optional bytes max_fee_per_gas = 3; // required; U256
  optional bytes max_priority_fee_per_gas = 4; // required; U256
  optional bytes gas_per_pubdata_limit = 5; // required; U256
  optional bytes initiator_address = 6; // required; H160
  optional bytes signature = 7; // required
  optional uint32 transaction_type = 8; // required
  optional InputData input = 9; // optional
  optional PaymasterParams paymaster_params = 10; // required
}

message ProtocolUpgradeTxCommonData {
  optional bytes sender_address = 1; // required; H160
  optional uint32 upgrade_id = 2; // required
  optional bytes max_fee_per_gas = 3; // required; U256
  optional bytes gas_limit = 4; // required; U256
  optional bytes gas_per_pubdata_limit = 5; // required; U256
  optional bytes canonical_tx_hash = 8; // required; H256
  optional bytes to_mint = 9; // required; U256
  optional bytes refund_recipient_address = 10; // required; H160
  
  // deprecated.
  optional bytes eth_hash = 6; // required; constant = [0;32]
  optional uint64 eth_block = 7; // required
}

message Execute {
  optional bytes contract_address = 1; // required; H160
  optional bytes calldata = 2; // required
  optional bytes value = 3; // required; U256
  repeated bytes factory_deps = 4;
}

message InputData {
  optional bytes data = 1; // required;
  optional bytes hash = 2; // required; H256
}

message PaymasterParams {
  optional bytes paymaster_address = 1; // required; H160
  optional bytes paymaster_input = 2; // required
}
