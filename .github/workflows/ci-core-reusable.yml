name: Workflow template for CI jobs for Core Components
on:
  workflow_call:
    inputs:
      compilers:
        description: "JSON of required compilers and their versions"
        type: string
        required: false
        default: '[{ "zksolc": ["1.3.14", "1.3.16", "1.3.17", "1.3.1", "1.3.7", "1.3.18", "1.3.19", "1.3.21"] } , { "zkvyper": ["1.3.13"] }]'

jobs:
  lint:
    name: lint
    uses: ./.github/workflows/ci-core-lint-reusable.yml

  unit-tests:
    runs-on: [ matterlabs-ci-runner-highmem-long ]

    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo IN_DOCKER=1 >> .env
          echo "SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage" >> .env
          echo "SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com" >> .env
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> .env
          echo "RUSTC_WRAPPER=sccache" >> .env

      # TODO: Remove when we after upgrade of hardhat-plugins
      - name: pre-download compilers
        run: |
          # Download needed versions of vyper compiler
          # Not sanitized due to unconventional path and tags
          mkdir -p ./hardhat-nodejs/compilers-v2/vyper/linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10 https://github.com/vyperlang/vyper/releases/download/v0.3.10/vyper.0.3.10+commit.91361694.linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3 https://github.com/vyperlang/vyper/releases/download/v0.3.3/vyper.0.3.3+commit.48e326f0.linux
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3

          COMPILERS_JSON='${{ inputs.compilers }}'
          echo "$COMPILERS_JSON" | jq -r '.[] | to_entries[] | .key as $compiler | .value[] | "\(.),\($compiler)"' | while IFS=, read -r version compiler; do
            mkdir -p "./hardhat-nodejs/compilers-v2/$compiler"
            wget -nv -O "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}" "https://github.com/matter-labs/${compiler}-bin/releases/download/v${version}/${compiler}-linux-amd64-musl-v${version}"
            chmod +x "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}"
          done

      - name: Start services
        run: |
          ci_localnet_up

      - name: Init
        run: |
          ci_run run_retried rustup show
          ci_run ./bin/zkt
          ci_run zk_supervisor contracts

      # FIXME: enable contract tests once tehy are stable
      #- name: Contracts unit tests
      #  run: ci_run yarn l1-contracts test

      - name: Rust unit tests
        run: |
          ci_run zk_supervisor test rust
          # Benchmarks are not tested by `cargo nextest` unless specified explicitly, and even then `criterion` harness is incompatible
          # with how `cargo nextest` runs tests. Thus, we run criterion-based benchmark tests manually.
          ci_run cargo test --release -p vm-benchmark --bench oneshot --bench batch

  # FIXME: support loadtest together with sync layer.
  # loadtest:
  #   runs-on: [ matterlabs-ci-runner-high-performance ]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #     # FIXME: support new VM mode
  #       vm_mode: ["OLD"]

  #   steps:
  #     - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
  #       with:
  #         submodules: "recursive"
  #         fetch-depth: 0

      # - name: Setup environment
      #   run: |
      #     echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
      #     echo $(pwd)/bin >> $GITHUB_PATH
      #     echo IN_DOCKER=1 >> .env
      #     echo "SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage" >> .env
      #     echo "SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com" >> .env
      #     echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> .env
      #     echo "RUSTC_WRAPPER=sccache" >> .env

  #     - name: Loadtest configuration
  #       run: |
  #         echo EXPECTED_TX_COUNT=${{ matrix.vm_mode == 'NEW' && 21000 || 16000 }} >> .env
  #         echo ACCOUNTS_AMOUNT="100" >> .env
  #         echo MAX_INFLIGHT_TXS="10" >> .env
  #         echo SYNC_API_REQUESTS_LIMIT="15" >> .env
  #         echo FAIL_FAST=true >> .env
  #         echo IN_DOCKER=1 >> .env

  #     - name: Start services
  #       run: |
  #         ci_localnet_up
  #         ci_run sccache --start-server

  #     - name: Init
  #       run: |
  #         ci_run git config --global --add safe.directory /usr/src/zksync
  #         ci_run git config --global --add safe.directory /usr/src/zksync/sdk/binaryen
  #         ci_run git config --global --add safe.directory /usr/src/zksync/contracts/system-contracts
  #         ci_run git config --global --add safe.directory /usr/src/zksync/contracts

      #     ci_run ./bin/zkt
      #     ci_run zk_inception chain create \
      #       --chain-name legacy \
      #       --chain-id sequential \
      #       --prover-mode no-proofs \
      #       --wallet-creation localhost \
      #       --l1-batch-commit-data-generator-mode rollup \
      #       --base-token-address 0x0000000000000000000000000000000000000001 \
      #       --base-token-price-nominator 1 \
      #       --base-token-price-denominator 1 \
      #       --set-as-default false \
      #       --ignore-prerequisites \
      #       --legacy-bridge

      #     ci_run zk_inception ecosystem init --dev --verbose
      #     ci_run zk_supervisor contracts --test-contracts

      # # `sleep 60` because we need to wait until server added all the tokens
      # - name: Run server
      #   run: |
      #     ci_run zk_supervisor config-writer --path ${{ matrix.vm_mode == 'NEW' && 'etc/env/file_based/overrides/tests/loadtest-new.yaml' || 'etc/env/file_based/overrides/tests/loadtest-old.yaml' }} --chain legacy
      #     ci_run zk_inception server --uring --chain=legacy --components api,tree,eth,state_keeper,housekeeper,commitment_generator,vm_runner_protective_reads &>server.log &
      #     ci_run sleep 60

  #     - name: Perform loadtest
  #       run: ci_run zk_supervisor t loadtest -v --chain=legacy

  #     - name: Show server.log logs
  #       if: always()
  #       run: ci_run cat server.log || true

  #     - name: Show sccache logs
  #       if: always()
  #       run: |
  #         ci_run sccache --show-stats || true
  #         ci_run cat /tmp/sccache_log.txt || true

  integration-tests:
    runs-on: [ matterlabs-ci-runner-ultra-performance ]
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0


      - name: Setup environment
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo IN_DOCKER=1 >> .env
          echo "SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage" >> .env
          echo "SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com" >> .env
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> .env
          echo "RUSTC_WRAPPER=sccache" >> .env
          echo RUN_CONTRACT_VERIFICATION_TEST=true >> $GITHUB_ENV

      - name: Start services
        run: |
          ci_localnet_up

      - name: Build zk_toolbox
        run: ci_run bash -c "./bin/zkt"

      - name: Create log directories
        run: |
          SERVER_LOGS_DIR=logs/server
          INTEGRATION_TESTS_LOGS_DIR=logs/integration_tests
          INTEGRATION_TESTS_EN_LOGS_DIR=logs/integration_tests/en
          SNAPSHOT_RECOVERY_LOGS_DIR=logs/snapshot_recovery/
          GENESIS_RECOVERY_LOGS_DIR=logs/genesis_recovery/
          EXTERNAL_NODE_LOGS_DIR=logs/external_node
          REVERT_LOGS_DIR=logs/revert

          mkdir -p $SERVER_LOGS_DIR
          mkdir -p $INTEGRATION_TESTS_LOGS_DIR
          mkdir -p $INTEGRATION_TESTS_EN_LOGS_DIR
          mkdir -p $SNAPSHOT_RECOVERY_LOGS_DIR
          mkdir -p $GENESIS_RECOVERY_LOGS_DIR
          mkdir -p $EXTERNAL_NODE_LOGS_DIR
          mkdir -p $REVERT_LOGS_DIR

          echo "SERVER_LOGS_DIR=$SERVER_LOGS_DIR" >> $GITHUB_ENV
          echo "INTEGRATION_TESTS_LOGS_DIR=$INTEGRATION_TESTS_LOGS_DIR" >> $GITHUB_ENV
          echo "INTEGRATION_TESTS_EN_LOGS_DIR=$INTEGRATION_TESTS_EN_LOGS_DIR" >> $GITHUB_ENV
          echo "SNAPSHOT_RECOVERY_LOGS_DIR=$SNAPSHOT_RECOVERY_LOGS_DIR" >> $GITHUB_ENV
          echo "GENESIS_RECOVERY_LOGS_DIR=$GENESIS_RECOVERY_LOGS_DIR" >> $GITHUB_ENV
          echo "EXTERNAL_NODE_LOGS_DIR=$EXTERNAL_NODE_LOGS_DIR" >> $GITHUB_ENV
          echo "REVERT_LOGS_DIR=$REVERT_LOGS_DIR" >> $GITHUB_ENV
# FIXME: restore tests for all the various types of chains
      - name: Initialize ecosystem
        run: |
          ci_run git config --global --add safe.directory /usr/src/zksync
          ci_run git config --global --add safe.directory /usr/src/zksync/contracts/system-contracts
          ci_run git config --global --add safe.directory /usr/src/zksync/contracts

          ci_run zk_inception ecosystem init --deploy-paymaster --deploy-erc20 \
            --deploy-ecosystem --l1-rpc-url=http://localhost:8545 \
            --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
            --server-db-name=zksync_server_localhost_era \
            --prover-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
            --prover-db-name=zksync_prover_localhost_era \
            --ignore-prerequisites --verbose \
            --observability=false
      
      - name: Initialize gateway chain
        run: |
          ci_run zk_inception chain create \
            --chain-name gateway \
            --chain-id 505 \
            --prover-mode no-proofs \
            --wallet-creation localhost \
            --l1-batch-commit-data-generator-mode rollup \
            --base-token-address 0x0000000000000000000000000000000000000001 \
            --base-token-price-nominator 1 \
            --base-token-price-denominator 1 \
            --set-as-default false \
            --ignore-prerequisites


          ci_run zk_inception chain init \
            --deploy-paymaster \
            --l1-rpc-url=http://localhost:8545 \
            --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
            --server-db-name=zksync_server_localhost_gateway \
            --prover-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
            --prover-db-name=zksync_prover_localhost_gateway \
            --port-offset 2000 \
            --chain gateway \

          ci_run zk_inception chain convert-to-gateway --chain gateway --ignore-prerequisites

      - name: Build test dependencies
        run: |
          ci_run zk_supervisor test build


      - name: Run gateway
        run: |
          ci_run zk_inception server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &

          ci_run sleep 5

      - name: Migrate chain to gateway
        run: |
          ci_run zk_inception chain migrate-to-gateway --chain era --gateway-chain-name gateway

      - name: Run era chain
        run: |
          ci_run zk_inception server --ignore-prerequisites --chain era &> ${{ env.SERVER_LOGS_DIR }}/rollup.log &

      - name: Run integration tests
        run: |
          ci_run zk_supervisor test integration --no-deps --ignore-prerequisites --chain era &> ${{ env.INTEGRATION_TESTS_LOGS_DIR }}/rollup.log &
          PID1=$!

          wait $PID1

      - name: Upload logs
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: logs
          path: logs
