syntax = "proto3";

import "zksync/config/object_store.proto";

package zksync.config.prover;

message ProofCompressor {
  optional uint32 compression_mode = 1; // required; u8
  optional uint32 prometheus_listener_port = 2; // required; u16
  optional string prometheus_pushgateway_url = 3; // required
  optional uint64 prometheus_push_interval_ms = 4; // optional; ms
  optional uint32 generation_timeout_in_secs = 5; // required; s
  optional uint32 max_attempts = 6; // required
  optional string universal_setup_path = 7; // required; fs path
  optional string universal_setup_download_url = 8; // required
  optional bool verify_wrapper_proof = 9; // required
  reserved 10, 11; reserved "universal_fflonk_setup_path", "universal_fflonk_setup_download_url";
}

enum SetupLoadMode {
  FROM_DISK = 0;
  FROM_MEMORY = 1;
}

enum CloudType {
  GCP = 0;
  LOCAL = 1;
}

message Prover {
  optional string setup_data_path = 1; // required; fs path?
  optional uint32 prometheus_port = 2; // required; u16
  optional uint32 max_attempts = 3; // required
  optional uint32 generation_timeout_in_secs = 4; // required; s
  optional config.object_store.ObjectStore prover_object_store = 23;
  reserved 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 24;
  reserved "base_layer_circuit_ids_to_be_verified", "recursive_layer_circuit_ids_to_be_verified", "setup_load_mode", "specialized_group_id", "witness_vector_generator_thread_count", "queue_capacity", "witness_vector_receiver_port", "zone_read_url", "shall_save_to_public_bucket", "availability_check_interval_in_secs", "public_object_store", "cloud_type";
}


message CircuitIdRoundTuple {
  optional uint32 circuit_id = 1; // required; u8
  optional uint32 aggregation_round = 2; // required; u8
}

message ProverGateway {
  optional string api_url = 1; // required
  optional uint32 api_poll_duration_secs = 2; // required; s
  optional uint32 prometheus_listener_port = 3; // required; u16
  optional string prometheus_pushgateway_url = 4; // required
  optional uint64 prometheus_push_interval_ms = 5; // optional; ms
  optional ApiMode api_mode = 8; // optional
  optional uint32 port = 9; // required; u16
  
  reserved 6, 7;
  reserved "http_port", "ws_port";
}


message WitnessGenerator {
  optional uint32 generation_timeout_in_secs = 1; // required;
  optional uint32 max_attempts = 2; // required;
  optional uint32 last_l1_batch_to_process = 5; // optional
  optional uint32 basic_generation_timeout_in_secs = 8; // optional;
  optional uint32 leaf_generation_timeout_in_secs = 9; // optional;
  optional uint32 node_generation_timeout_in_secs = 10; // optional;
  optional uint32 scheduler_generation_timeout_in_secs = 11; // optional;
  optional uint32 recursion_tip_timeout_in_secs = 12; // optional;
  optional uint32 prometheus_listener_port = 13; // optional;
  optional uint64 max_circuits_in_flight = 14; // optional;
  reserved 3, 4, 6, 7;
  reserved "dump_arguments_for_blocks", "force_process_block", "blocks_proving_percentage", "shall_save_to_public_bucket";
}

message ProofDataHandler {
  optional uint32 http_port = 1; // required; u16
  optional uint32 proof_generation_timeout_in_secs = 2; // required; s
  optional bool tee_support = 3; // optional
  optional uint64 first_tee_processed_batch = 4; // optional
  optional uint32 tee_proof_generation_timeout_in_secs = 5; // optional
  optional uint32 tee_batch_permanently_ignored_timeout_in_hours = 6; // optional
  optional string gateway_api_url = 10; // optional
  optional uint32 proof_fetch_interval_in_secs = 11; // optional
  optional uint32 proof_gen_data_submit_interval_in_secs = 12; // optional

  reserved 7,8,9;
  reserved "api_url", "batch_readiness_check_interval_in_secs", "retry_connection_interval_in_secs";
}

enum ApiMode {
  LEGACY = 0;
  PROVER_CLUSTER = 1;
}