{
  "db_name": "PostgreSQL",
<<<<<<<< HEAD:core/lib/dal/.sqlx/query-6f4463a2f95fec4f8b511d28566babfb146e9932d4142139a49599c4bdbd659f.json
  "query": "\n            SELECT\n                transactions.is_priority,\n                transactions.initiator_address,\n                transactions.gas_limit,\n                transactions.gas_per_pubdata_limit,\n                transactions.received_at,\n                miniblocks.number AS \"miniblock_number?\",\n                transactions.error,\n                transactions.effective_gas_price,\n                transactions.refunded_gas,\n                commit_tx.tx_hash AS \"eth_commit_tx_hash?\",\n                prove_tx.tx_hash AS \"eth_prove_tx_hash?\",\n                execute_tx.tx_hash AS \"eth_execute_tx_hash?\"\n            FROM\n                transactions\n            LEFT JOIN miniblocks ON miniblocks.number = transactions.miniblock_number\n            LEFT JOIN l1_batches ON l1_batches.number = miniblocks.l1_batch_number\n            LEFT JOIN eth_txs_history AS commit_tx\n                ON (\n                    l1_batches.eth_commit_tx_id = commit_tx.eth_tx_id\n                    AND commit_tx.confirmed_at IS NOT NULL\n                )\n            LEFT JOIN eth_txs_history AS prove_tx\n                ON (\n                    l1_batches.eth_prove_tx_id = prove_tx.eth_tx_id\n                    AND prove_tx.confirmed_at IS NOT NULL\n                )\n            LEFT JOIN eth_txs_history AS execute_tx\n                ON (\n                    l1_batches.eth_execute_tx_id = execute_tx.eth_tx_id\n                    AND execute_tx.confirmed_at IS NOT NULL\n                )\n            WHERE\n                transactions.hash = $1\n                AND transactions.data != '{}'::jsonb\n            ",
========
  "query": "\n            SELECT\n                transactions.is_priority,\n                transactions.initiator_address,\n                transactions.gas_limit,\n                transactions.gas_per_pubdata_limit,\n                transactions.received_at,\n                miniblocks.number AS \"miniblock_number?\",\n                transactions.error,\n                transactions.effective_gas_price,\n                transactions.refunded_gas,\n                commit_tx.tx_hash AS \"eth_commit_tx_hash?\",\n                prove_tx.tx_hash AS \"eth_prove_tx_hash?\",\n                execute_tx.tx_hash AS \"eth_execute_tx_hash?\",\n                execute_tx.finality_status AS \"eth_execute_tx_finality_status?\",\n                precommit_tx.tx_hash AS \"eth_precommit_tx_hash?\"\n            FROM\n                transactions\n            LEFT JOIN miniblocks ON miniblocks.number = transactions.miniblock_number\n            LEFT JOIN l1_batches ON l1_batches.number = miniblocks.l1_batch_number\n            LEFT JOIN eth_txs_history AS precommit_tx\n                ON (\n                    miniblocks.eth_precommit_tx_id = precommit_tx.eth_tx_id\n                    AND precommit_tx.confirmed_at IS NOT NULL\n                )\n            LEFT JOIN eth_txs_history AS commit_tx\n                ON (\n                    l1_batches.eth_commit_tx_id = commit_tx.eth_tx_id\n                    AND commit_tx.confirmed_at IS NOT NULL\n                )\n            LEFT JOIN eth_txs_history AS prove_tx\n                ON (\n                    l1_batches.eth_prove_tx_id = prove_tx.eth_tx_id\n                    AND prove_tx.confirmed_at IS NOT NULL\n                )\n            LEFT JOIN eth_txs_history AS execute_tx\n                ON (\n                    l1_batches.eth_execute_tx_id = execute_tx.eth_tx_id\n                    AND execute_tx.confirmed_at IS NOT NULL\n                )\n            WHERE\n                transactions.hash = $1\n                AND transactions.data != '{}'::jsonb\n            ",
>>>>>>>> 1d1a5d631 (Implement confirmation of eth txs):core/lib/dal/.sqlx/query-32ef200122036530ec0a47d9eda4cca42827dc888de9e7e06233edde7bbe2362.json
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "is_priority",
        "type_info": "Bool"
      },
      {
        "ordinal": 1,
        "name": "initiator_address",
        "type_info": "Bytea"
      },
      {
        "ordinal": 2,
        "name": "gas_limit",
        "type_info": "Numeric"
      },
      {
        "ordinal": 3,
        "name": "gas_per_pubdata_limit",
        "type_info": "Numeric"
      },
      {
        "ordinal": 4,
        "name": "received_at",
        "type_info": "Timestamp"
      },
      {
        "ordinal": 5,
        "name": "miniblock_number?",
        "type_info": "Int8"
      },
      {
        "ordinal": 6,
        "name": "error",
        "type_info": "Varchar"
      },
      {
        "ordinal": 7,
        "name": "effective_gas_price",
        "type_info": "Numeric"
      },
      {
        "ordinal": 8,
        "name": "refunded_gas",
        "type_info": "Int8"
      },
      {
        "ordinal": 9,
        "name": "eth_commit_tx_hash?",
        "type_info": "Text"
      },
      {
        "ordinal": 10,
        "name": "eth_prove_tx_hash?",
        "type_info": "Text"
      },
      {
        "ordinal": 11,
        "name": "eth_execute_tx_hash?",
        "type_info": "Text"
<<<<<<<< HEAD:core/lib/dal/.sqlx/query-6f4463a2f95fec4f8b511d28566babfb146e9932d4142139a49599c4bdbd659f.json
========
      },
      {
        "ordinal": 12,
        "name": "eth_execute_tx_finality_status?",
        "type_info": "Text"
      },
      {
        "ordinal": 13,
        "name": "eth_precommit_tx_hash?",
        "type_info": "Text"
>>>>>>>> 1d1a5d631 (Implement confirmation of eth txs):core/lib/dal/.sqlx/query-32ef200122036530ec0a47d9eda4cca42827dc888de9e7e06233edde7bbe2362.json
      }
    ],
    "parameters": {
      "Left": [
        "Bytea"
      ]
    },
    "nullable": [
      false,
      false,
      true,
      true,
      false,
      false,
      true,
      true,
      false,
      false,
      false,
<<<<<<<< HEAD:core/lib/dal/.sqlx/query-6f4463a2f95fec4f8b511d28566babfb146e9932d4142139a49599c4bdbd659f.json
      false
    ]
  },
  "hash": "6f4463a2f95fec4f8b511d28566babfb146e9932d4142139a49599c4bdbd659f"
========
      false,
      false,
      false
    ]
  },
  "hash": "32ef200122036530ec0a47d9eda4cca42827dc888de9e7e06233edde7bbe2362"
>>>>>>>> 1d1a5d631 (Implement confirmation of eth txs):core/lib/dal/.sqlx/query-32ef200122036530ec0a47d9eda4cca42827dc888de9e7e06233edde7bbe2362.json
}
