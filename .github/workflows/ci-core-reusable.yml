name: Workflow template for CI jobs for Core Components
on:
  workflow_call:
    inputs:
      compilers:
        description: "JSON of required compilers and their versions"
        type: string
        required: false
        default: '[{ "zksolc": ["1.3.14", "1.3.16", "1.3.17", "1.3.1", "1.3.7", "1.3.18", "1.3.19", "1.3.21"] } , { "zkvyper": ["1.3.13"] }]'

env:
  RUST_BACKTRACE: 1
  PASSED_ENV_VARS: RUST_BACKTRACE
  YQ_VERSION: "4.45.1"

jobs:
  lint:
    name: lint
    uses: ./.github/workflows/ci-core-lint-reusable.yml
  unit-tests:
    runs-on: [ matterlabs-ci-runner-highmem-long ]

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup-env

      # TODO: Remove when we after upgrade of hardhat-plugins
      - name: pre-download compilers
        run: |
          # Download needed versions of vyper compiler
          # Not sanitized due to unconventional path and tags
          mkdir -p ./hardhat-nodejs/compilers-v2/vyper/linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10 https://github.com/vyperlang/vyper/releases/download/v0.3.10/vyper.0.3.10+commit.91361694.linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3 https://github.com/vyperlang/vyper/releases/download/v0.3.3/vyper.0.3.3+commit.48e326f0.linux
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3

          COMPILERS_JSON='${{ inputs.compilers }}'
          echo "$COMPILERS_JSON" | jq -r '.[] | to_entries[] | .key as $compiler | .value[] | "\(.),\($compiler)"' | while IFS=, read -r version compiler; do
            mkdir -p "./hardhat-nodejs/compilers-v2/$compiler"
            wget -nv -O "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}" "https://github.com/matter-labs/${compiler}-bin/releases/download/v${version}/${compiler}-linux-amd64-musl-v${version}"
            chmod +x "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}"
          done

      - name: Init
        run: |
          ci_run run_retried rustup show

      - name: Build contracts
        run: |
          ci_run zkstack dev contracts

      - name: Use Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4
        with:
          node-version: 18.20.8

      - name: Install yarn
        run: |
          npm install -g yarn

      - name: Check contracts hashes
        working-directory: contracts
        run: |
          yarn calculate-hashes:check

      - name: Download compilers for contract verifier tests
        run: ci_run zkstack contract-verifier init --zksolc-version=v1.5.10 --zkvyper-version=v1.5.4 --solc-version=0.8.26 --vyper-version=v0.3.10 --era-vm-solc-version=0.8.26-1.0.2 --only --chain era

      - name: Rust unit tests
        run: |
          ci_run zkstack dev test rust
          # Benchmarks are not tested by `cargo nextest` unless specified explicitly, and even then `criterion` harness is incompatible
          # with how `cargo nextest` runs tests. Thus, we run criterion-based benchmark tests manually.
          ci_run cargo test --manifest-path ./core/Cargo.toml --release -p vm-benchmark --bench oneshot --bench batch

  loadtest:
    runs-on: [ matterlabs-ci-runner-high-performance ]
    strategy:
      fail-fast: false
      matrix:
        vm_mode: [ "OLD", "NEW" ]

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Loadtest configuration
        run: |
          echo EXPECTED_TX_COUNT=${{ matrix.vm_mode == 'NEW' && 36000 || 22500 }} >> .env
          echo ACCOUNTS_AMOUNT="100" >> .env
          echo MAX_INFLIGHT_TXS="10" >> .env
          echo SYNC_API_REQUESTS_LIMIT="15" >> .env
          echo FAIL_FAST=true >> .env

      - name: Setup Environment
        uses: ./.github/actions/setup-env

      - name: Create and initialize legacy chain
        run: |
          ci_run zkstack chain create \
            --chain-name legacy \
            --chain-id sequential \
            --prover-mode no-proofs \
            --wallet-creation localhost \
            --l1-batch-commit-data-generator-mode rollup \
            --base-token-address 0x0000000000000000000000000000000000000001 \
            --base-token-price-nominator 1 \
            --base-token-price-denominator 1 \
            --set-as-default false \
            --ignore-prerequisites \
            --legacy-bridge \
            --evm-emulator false

          ci_run zkstack ecosystem init --dev --support-l2-legacy-shared-bridge-test true --verbose

      # `sleep 60` because we need to wait until server added all the tokens
      - name: Run server
        run: |
          ci_run zkstack dev config-writer --path ${{ matrix.vm_mode == 'NEW' && 'etc/env/file_based/overrides/tests/loadtest-new.yaml' || 'etc/env/file_based/overrides/tests/loadtest-old.yaml' }} --chain legacy
          ci_run zkstack server --uring --chain=legacy --components api,tree,eth,state_keeper,housekeeper,commitment_generator,vm_runner_protective_reads &>server.log &
          ci_run sleep 60

      - name: Perform loadtest
        run: ci_run zkstack dev t loadtest -v --chain=legacy

      - name: Show server.log logs
        if: always()
        run: ci_run cat server.log || true

      - name: Show sccache logs
        if: always()
        run: |
          ci_run sccache --show-stats || true
          ci_run cat /tmp/sccache_log.txt || true

  integration-tests:
    runs-on: [ matterlabs-ci-runner-ultra-performance ]
    strategy:
      # ----------------------------------------------
      # Note, that while the contracts do support gateway chain
      # in reality it won't exist for quite some time and so
      # we will test both cases here
      # ----------------------------------------------
      matrix:
        use_gateway_chain: [ "WITH_GATEWAY", "WITHOUT_GATEWAY" ]
        tested_chain_type: [ "era", "validium", "custom_token"]
      # In some cases it's useful to continue one job even if another fails.
      fail-fast: false
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> .env
          echo RUN_CONTRACT_VERIFICATION_TEST=true >> $GITHUB_ENV
          echo "USE_GATEWAY_CHAIN=${{ matrix.use_gateway_chain }}" >> .env
          echo "TESTED_CHAIN_TYPE=${{ matrix.tested_chain_type }}" >> .env
          SERVER_LOGS_DIR=logs/server
          mkdir -p $SERVER_LOGS_DIR
          echo "SERVER_LOGS_DIR=$SERVER_LOGS_DIR" >> $GITHUB_ENV
          sudo wget https://github.com/mikefarah/yq/releases/download/v$YQ_VERSION/yq_linux_amd64 -O /usr/local/bin/yq && sudo chmod a+x /usr/local/bin/yq
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Setup Environment
        uses: ./.github/actions/setup-env

      # TODO: Remove once merged into main
      - name: (TEMPORARY) Update foundry
        run: |
          ci_run curl -LO https://github.com/matter-labs/foundry-zksync/releases/download/foundry-zksync-v0.0.26/foundry_zksync_v0.0.26_linux_amd64.tar.gz
          ci_run mkdir ./foundry-temp
          ci_run tar zxf foundry_zksync_v0.0.26_linux_amd64.tar.gz -C ./foundry-temp
          ci_run cp ./foundry-temp/forge /usr/local/cargo/bin/forge
          ci_run cp ./foundry-temp/cast /usr/local/cargo/bin/cast
          echo "Foundry version after update:"
          ci_run forge --version
          ci_run rm -rf ./foundry-temp foundry_zksync_v0.0.26_linux_amd64.tar.gz

      - name: Build test dependencies
        run: |
          ci_run zkstack dev test build

      - name: Build code and init ecosystem
        run: |
          ci_run build_and_init_ecosystem

      - name: Test registration of chains with transactions signed "offline"
        run: |
          ci_run zkstack chain create \
          --chain-name offline_chain \
          --chain-id sequential \
          --prover-mode no-proofs \
          --wallet-creation localhost \
          --l1-batch-commit-data-generator-mode rollup \
          --base-token-address 0x0000000000000000000000000000000000000001 \
          --base-token-price-nominator 1 \
          --base-token-price-denominator 1 \
          --set-as-default false \
          --ignore-prerequisites \
          --evm-emulator false

          ci_run zkstack chain build-transactions --chain offline_chain --l1-rpc-url http://127.0.0.1:8545

          governor_pk=$(awk '/governor:/ {flag=1} flag && /private_key:/ {print $2; exit}' ./configs/wallets.yaml)

          ci_run zkstack dev send-transactions \
          --file ./transactions/chain/offline_chain/register-zk-chain-txns.json \
          --l1-rpc-url http://127.0.0.1:8545 \
          --private-key $governor_pk

          bridge_hub=$(awk '/bridgehub_proxy_addr/ {print $2}' ./configs/contracts.yaml)
          chain_id=$(awk '/chain_id:/ {print $2}' ./chains/offline_chain/ZkStack.yaml)

          hyperchain_output=$(ci_run cast call $bridge_hub "getHyperchain(uint256)" $chain_id)

          if [[ $hyperchain_output == 0x* && ${#hyperchain_output} -eq 66 ]]; then
              echo "Chain successfully registered: $hyperchain_output"
          else
              echo "Failed to register chain: $hyperchain_output"
              exit 1
          fi

      # ----------------------------------------------------------------
      #  Only create/initialize the gateway chain *if* use_gateway_chain=WITH_GATEWAY
      # ----------------------------------------------------------------
      - name: Initialize gateway chain
        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
        run: |
          ci_run zkstack chain create \
          --chain-name gateway \
          --chain-id 505 \
          --prover-mode no-proofs \
          --wallet-creation localhost \
          --l1-batch-commit-data-generator-mode rollup \
          --base-token-address 0x0000000000000000000000000000000000000001 \
          --base-token-price-nominator 1 \
          --base-token-price-denominator 1 \
          --set-as-default false \
          --ignore-prerequisites \
          --evm-emulator false
          
          ci_run zkstack chain init \
          --deploy-paymaster \
          --l1-rpc-url=http://localhost:8545 \
          --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
          --server-db-name=zksync_server_localhost_gateway \
          --chain gateway \
          --validium-type no-da
          
          ci_run zkstack chain gateway create-tx-filterer --chain gateway --ignore-prerequisites
          ci_run zkstack chain gateway convert-to-gateway --chain gateway --ignore-prerequisites

      - name: Run gateway
        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
        run: |
          ci_run zkstack dev config-writer --path etc/env/file_based/overrides/tests/gateway.yaml --chain gateway
          ci_run zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
          ci_run zkstack server wait --ignore-prerequisites --verbose --chain gateway

      - name: Initialize Contract verifier
        run: |
          ci_run zkstack contract-verifier init --zksolc-version=v1.5.10 --zkvyper-version=v1.5.4 --solc-version=0.8.26 --vyper-version=v0.3.10 --era-vm-solc-version=0.8.26-1.0.2 --only --chain era
          ci_run zkstack contract-verifier run --chain era &> ${{ env.SERVER_LOGS_DIR }}/contract-verifier-rollup.log &
          ci_run zkstack contract-verifier wait --chain era --verbose

      - name: Check permissions
        run: |
          whoami
          pwd
          touch testfile
          ls -l testfile

      - name: Run tests
        run: |
          ci_run yarn highlevel-test-tools test

      # Upgrade tests should run be separately,
      # because as soon as they finish the bootloader will be different
      - name: Run upgrade test
        run: |
          ci_run zkstack dev init-test-wallet --chain era
          if [ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]; then
            ci_run zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
            ci_run zkstack server wait --timeout 30 --ignore-prerequisites --verbose --chain gateway
            ci_run zkstack dev test gateway-migration --to-gateway  --chain era --no-deps
          fi
          ci_run ./bin/stop_nodes.sh

          # Only start & wait for the gateway server if use_gateway_chain == WITH_GATEWAY
          if [ "${{ matrix.use_gateway_chain }}" == "WITH_GATEWAY" ]; then
            ci_run zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
            ci_run zkstack server wait --timeout 30 --ignore-prerequisites --verbose --chain gateway
          fi

          # Always run the upgrade test against era
          ci_run zkstack dev test upgrade --no-deps --chain era

      - name: Upload logs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: logs_${{matrix.use_gateway_chain}}_${{matrix.tested_chain_type}}
          path: |
            logs/
            chains/*/artifacts/vm_dumps/
            chains/*/configs/
