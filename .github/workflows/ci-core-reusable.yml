name: Workflow template for CI jobs for Core Components
on:
  workflow_call:
    inputs:
      compilers:
        description: "JSON of required compilers and their versions"
        type: string
        required: false
        default: '[{ "zksolc": ["1.3.14", "1.3.16", "1.3.17", "1.3.1", "1.3.7", "1.3.18", "1.3.19", "1.3.21"] } , { "zkvyper": ["1.3.13"] }]'

jobs:
  lint:
    name: lint
    uses: ./.github/workflows/ci-core-lint-reusable.yml
  unit-tests:
    runs-on: [ matterlabs-ci-runner-highmem-long ]

    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo IN_DOCKER=1 >> .env

      # TODO: Remove when we after upgrade of hardhat-plugins
      - name: pre-download compilers
        run: |
          # Download needed versions of vyper compiler
          # Not sanitized due to unconventional path and tags
          mkdir -p ./hardhat-nodejs/compilers-v2/vyper/linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10 https://github.com/vyperlang/vyper/releases/download/v0.3.10/vyper.0.3.10+commit.91361694.linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3 https://github.com/vyperlang/vyper/releases/download/v0.3.3/vyper.0.3.3+commit.48e326f0.linux
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3

          COMPILERS_JSON='${{ inputs.compilers }}'
          echo "$COMPILERS_JSON" | jq -r '.[] | to_entries[] | .key as $compiler | .value[] | "\(.),\($compiler)"' | while IFS=, read -r version compiler; do
            mkdir -p "./hardhat-nodejs/compilers-v2/$compiler"
            wget -nv -O "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}" "https://github.com/matter-labs/${compiler}-bin/releases/download/v${version}/${compiler}-linux-amd64-musl-v${version}"
            chmod +x "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}"
          done

      - name: Start services
        run: |
          ci_localnet_up
          ci_run sccache --start-server

      - name: Init
        run: |
          ci_run run_retried rustup show
          ci_run ./bin/zkt
          ci_run zk_supervisor contracts

      - name: Contracts unit tests
        run: ci_run yarn l1-contracts test

      - name: Rust unit tests
        run: |
          ci_run zk_supervisor test rust
          # Benchmarks are not tested by `cargo nextest` unless specified explicitly, and even then `criterion` harness is incompatible
          # with how `cargo nextest` runs tests. Thus, we run criterion-based benchmark tests manually.
          ci_run cargo test --release -p vm-benchmark --bench oneshot --bench batch

  loadtest:
    runs-on: [ matterlabs-ci-runner-high-performance ]
    strategy:
      fail-fast: false
      matrix:
        vm_mode: [ "old", "new" ]

    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo IN_DOCKER=1 >> .env

      - name: Loadtest configuration
        run: |
          echo EXPECTED_TX_COUNT=${{ matrix.vm_mode == 'new' && 21000 || 16000 }} >> .env
          echo ACCOUNTS_AMOUNT="100" >> .env
          echo MAX_INFLIGHT_TXS="10" >> .env
          echo SYNC_API_REQUESTS_LIMIT="15" >> .env
          echo FAIL_FAST=true >> .env
          echo IN_DOCKER=1 >> .env
          echo DATABASE_MERKLE_TREE_MODE=lightweight >> .env

      - name: Start services
        run: |
          ci_localnet_up
          ci_run sccache --start-server

      - name: Init
        run: |
          ci_run git config --global --add safe.directory /usr/src/zksync
          ci_run git config --global --add safe.directory /usr/src/zksync/sdk/binaryen
          ci_run git config --global --add safe.directory /usr/src/zksync/contracts/system-contracts
          ci_run git config --global --add safe.directory /usr/src/zksync/contracts

          ci_run zk
          ci_run zk init --local-legacy-bridge-testing

      # `sleep 60` because we need to wait until server added all the tokens
      - name: Run server
        run: |
          EXPERIMENTAL_VM_STATE_KEEPER_FAST_VM_MODE=${{ matrix.vm_mode }} \
          CHAIN_MEMPOOL_DELAY_INTERVAL=50 \
          PASSED_ENV_VARS="EXPERIMENTAL_VM_STATE_KEEPER_FAST_VM_MODE,CHAIN_MEMPOOL_DELAY_INTERVAL" \
            ci_run zk server --uring --components api,tree,eth,state_keeper,housekeeper,commitment_generator,vm_runner_protective_reads &>server.log &
          ci_run sleep 60

      - name: Deploy legacy era contracts
        run: ci_run zk contract setup-legacy-bridge-era

      - name: Perform loadtest
        run: ci_run zk run loadtest

      - name: Show server.log logs
        if: always()
        run: ci_run cat server.log || true

      - name: Show sccache logs
        if: always()
        run: |
          ci_run sccache --show-stats || true
          ci_run cat /tmp/sccache_log.txt || true

