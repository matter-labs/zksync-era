// For config readability and ease of use, some of the primitive types are
// encoded as strings. Fields of these types have a comment with the name of the type.
// Here is the list of string-encoded types and their corresponding string formats:
//
// IpAddr - TCP socket address, encoded as a string of the form "IP:port".
//   Both IPv4 and IPv6 are supported
//   (note that opening IPv6 ports may not work depending on the VM capabilities).
//   examples: "203.0.113.7:3456", "[2001:DB8::1]:4567"
//
// ValidatorPublicKey - public key of the validator (consensus participant) of the form "validator:public:<signature scheme>:<hex encoded key material>"
//   Currently only bn254 signature scheme is supported for validators.
//   example: "validator:public:bn254:4b0c4697f0a35eab30f63684ae4611f3c1d631eecfd97237e2345a9b3d0c472dbb16c49b793beceaab0cdd89cda6ff1099bd1aaf1ad6cabde9a15793cc09b407"
//
// NodePublicKey - public key of the node (gossip network participant) of the form "node:public:<signature scheme>:<hex encoded key material>"
//   Currently only ed25519 signature scheme is supported for nodes.
//   example: "node:public:ed25519:d36607699a0a3fbe3de16947928cf299484219ff62ca20f387795b0859dbe501"
syntax = "proto3";

package zksync.core.consensus;

// (public key, ip address) of a gossip network node. 
message NodeAddr {
  optional string key = 1; // required; NodePublicKey
  optional string addr = 2; // required; IpAddr
}

message ConsensusConfig {
  // IP:port to listen on, for incoming TCP connections.
  // Use `0.0.0.0:<port>` to listen on all network interfaces (i.e. on all IPs exposed by this VM).
  optional string server_addr = 1; // required; IpAddr
  
  // Public IP:port to advertise, should forward to server_addr.
  // Can be `127.0.0.1:<port>` for local tests.
  optional string public_addr = 2; // required; IpAddr
 
  // Public keys of all validators.
  // Currently it has to be a singleton with a public key corresponding to secret key in CONSENSUS_VALIDATOR_KEY env var.
  repeated string validators = 3; // required; ValidatorPublicKey

  // Maximal allowed size of the payload.
  optional uint64 max_payload_size = 4; // required; bytes

  // Inbound connections that should be unconditionally accepted on the gossip network.
  repeated string gossip_static_inbound = 5; // required; NodePublicKey
  
  // Limit on the number of gossip network inbound connections outside
  // of the `gossip_static_inbound` set.
  optional uint64 gossip_dynamic_inbound_limit = 6; // required

  // Outbound gossip network connections that the node should actively try to
  // establish and maintain.
  repeated NodeAddr gossip_static_outbound = 7;
}
