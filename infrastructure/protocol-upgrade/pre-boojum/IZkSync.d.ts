/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, PayableOverrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface IZkSyncInterface extends ethers.utils.Interface {
    functions: {
        'acceptGovernor()': FunctionFragment;
        'cancelUpgradeProposal(bytes32)': FunctionFragment;
        'commitBlocks(tuple,tuple[])': FunctionFragment;
        'executeBlocks(tuple[])': FunctionFragment;
        'executeUpgrade(tuple,bytes32)': FunctionFragment;
        'facetAddress(bytes4)': FunctionFragment;
        'facetAddresses()': FunctionFragment;
        'facetFunctionSelectors(address)': FunctionFragment;
        'facets()': FunctionFragment;
        'finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])': FunctionFragment;
        'freezeDiamond()': FunctionFragment;
        'getAllowList()': FunctionFragment;
        'getCurrentProposalId()': FunctionFragment;
        'getFirstUnprocessedPriorityTx()': FunctionFragment;
        'getGovernor()': FunctionFragment;
        'getL2BootloaderBytecodeHash()': FunctionFragment;
        'getL2DefaultAccountBytecodeHash()': FunctionFragment;
        'getL2SystemContractsUpgradeBlockNumber()': FunctionFragment;
        'getL2SystemContractsUpgradeTxHash()': FunctionFragment;
        'getName()': FunctionFragment;
        'getPendingGovernor()': FunctionFragment;
        'getPriorityQueueSize()': FunctionFragment;
        'getPriorityTxMaxGasLimit()': FunctionFragment;
        'getProposedUpgradeHash()': FunctionFragment;
        'getProposedUpgradeTimestamp()': FunctionFragment;
        'getProtocolVersion()': FunctionFragment;
        'getSecurityCouncil()': FunctionFragment;
        'getTotalBlocksCommitted()': FunctionFragment;
        'getTotalBlocksExecuted()': FunctionFragment;
        'getTotalBlocksVerified()': FunctionFragment;
        'getTotalPriorityTxs()': FunctionFragment;
        'getUpgradeProposalState()': FunctionFragment;
        'getVerifier()': FunctionFragment;
        'getVerifierParams()': FunctionFragment;
        'isApprovedBySecurityCouncil()': FunctionFragment;
        'isDiamondStorageFrozen()': FunctionFragment;
        'isEthWithdrawalFinalized(uint256,uint256)': FunctionFragment;
        'isFacetFreezable(address)': FunctionFragment;
        'isFunctionFreezable(bytes4)': FunctionFragment;
        'isValidator(address)': FunctionFragment;
        'l2LogsRootHash(uint256)': FunctionFragment;
        'l2TransactionBaseCost(uint256,uint256,uint256)': FunctionFragment;
        'priorityQueueFrontOperation()': FunctionFragment;
        'proposeShadowUpgrade(bytes32,uint40)': FunctionFragment;
        'proposeTransparentUpgrade(tuple,uint40)': FunctionFragment;
        'proveBlocks(tuple,tuple[],tuple)': FunctionFragment;
        'proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)': FunctionFragment;
        'proveL2LogInclusion(uint256,uint256,tuple,bytes32[])': FunctionFragment;
        'proveL2MessageInclusion(uint256,uint256,tuple,bytes32[])': FunctionFragment;
        'requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)': FunctionFragment;
        'revertBlocks(uint256)': FunctionFragment;
        'securityCouncilUpgradeApprove(bytes32)': FunctionFragment;
        'setPendingGovernor(address)': FunctionFragment;
        'setPorterAvailability(bool)': FunctionFragment;
        'setPriorityTxMaxGasLimit(uint256)': FunctionFragment;
        'setValidator(address,bool)': FunctionFragment;
        'storedBlockHash(uint256)': FunctionFragment;
        'unfreezeDiamond()': FunctionFragment;
        'upgradeProposalHash(tuple,uint256,bytes32)': FunctionFragment;
    };

    encodeFunctionData(functionFragment: 'acceptGovernor', values?: undefined): string;
    encodeFunctionData(functionFragment: 'cancelUpgradeProposal', values: [BytesLike]): string;
    encodeFunctionData(
        functionFragment: 'commitBlocks',
        values: [
            {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[]
        ]
    ): string;
    encodeFunctionData(
        functionFragment: 'executeBlocks',
        values: [
            {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[]
        ]
    ): string;
    encodeFunctionData(
        functionFragment: 'executeUpgrade',
        values: [
            {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            BytesLike
        ]
    ): string;
    encodeFunctionData(functionFragment: 'facetAddress', values: [BytesLike]): string;
    encodeFunctionData(functionFragment: 'facetAddresses', values?: undefined): string;
    encodeFunctionData(functionFragment: 'facetFunctionSelectors', values: [string]): string;
    encodeFunctionData(functionFragment: 'facets', values?: undefined): string;
    encodeFunctionData(
        functionFragment: 'finalizeEthWithdrawal',
        values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike[]]
    ): string;
    encodeFunctionData(functionFragment: 'freezeDiamond', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getAllowList', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getCurrentProposalId', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getFirstUnprocessedPriorityTx', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getGovernor', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getL2BootloaderBytecodeHash', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getL2DefaultAccountBytecodeHash', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getL2SystemContractsUpgradeBlockNumber', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getL2SystemContractsUpgradeTxHash', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getName', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getPendingGovernor', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getPriorityQueueSize', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getPriorityTxMaxGasLimit', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getProposedUpgradeHash', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getProposedUpgradeTimestamp', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getProtocolVersion', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getSecurityCouncil', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getTotalBlocksCommitted', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getTotalBlocksExecuted', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getTotalBlocksVerified', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getTotalPriorityTxs', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getUpgradeProposalState', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getVerifier', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getVerifierParams', values?: undefined): string;
    encodeFunctionData(functionFragment: 'isApprovedBySecurityCouncil', values?: undefined): string;
    encodeFunctionData(functionFragment: 'isDiamondStorageFrozen', values?: undefined): string;
    encodeFunctionData(functionFragment: 'isEthWithdrawalFinalized', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'isFacetFreezable', values: [string]): string;
    encodeFunctionData(functionFragment: 'isFunctionFreezable', values: [BytesLike]): string;
    encodeFunctionData(functionFragment: 'isValidator', values: [string]): string;
    encodeFunctionData(functionFragment: 'l2LogsRootHash', values: [BigNumberish]): string;
    encodeFunctionData(
        functionFragment: 'l2TransactionBaseCost',
        values: [BigNumberish, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: 'priorityQueueFrontOperation', values?: undefined): string;
    encodeFunctionData(functionFragment: 'proposeShadowUpgrade', values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(
        functionFragment: 'proposeTransparentUpgrade',
        values: [
            {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            BigNumberish
        ]
    ): string;
    encodeFunctionData(
        functionFragment: 'proveBlocks',
        values: [
            {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            }
        ]
    ): string;
    encodeFunctionData(
        functionFragment: 'proveL1ToL2TransactionStatus',
        values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BytesLike[], BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: 'proveL2LogInclusion',
        values: [
            BigNumberish,
            BigNumberish,
            {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            BytesLike[]
        ]
    ): string;
    encodeFunctionData(
        functionFragment: 'proveL2MessageInclusion',
        values: [
            BigNumberish,
            BigNumberish,
            { txNumberInBlock: BigNumberish; sender: string; data: BytesLike },
            BytesLike[]
        ]
    ): string;
    encodeFunctionData(
        functionFragment: 'requestL2Transaction',
        values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish, BytesLike[], string]
    ): string;
    encodeFunctionData(functionFragment: 'revertBlocks', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'securityCouncilUpgradeApprove', values: [BytesLike]): string;
    encodeFunctionData(functionFragment: 'setPendingGovernor', values: [string]): string;
    encodeFunctionData(functionFragment: 'setPorterAvailability', values: [boolean]): string;
    encodeFunctionData(functionFragment: 'setPriorityTxMaxGasLimit', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setValidator', values: [string, boolean]): string;
    encodeFunctionData(functionFragment: 'storedBlockHash', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'unfreezeDiamond', values?: undefined): string;
    encodeFunctionData(
        functionFragment: 'upgradeProposalHash',
        values: [
            {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            BigNumberish,
            BytesLike
        ]
    ): string;

    decodeFunctionResult(functionFragment: 'acceptGovernor', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'cancelUpgradeProposal', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'commitBlocks', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'executeBlocks', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'executeUpgrade', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'facetAddress', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'facetAddresses', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'facetFunctionSelectors', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'facets', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'finalizeEthWithdrawal', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'freezeDiamond', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getAllowList', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getCurrentProposalId', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getFirstUnprocessedPriorityTx', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getGovernor', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getL2BootloaderBytecodeHash', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getL2DefaultAccountBytecodeHash', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getL2SystemContractsUpgradeBlockNumber', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getL2SystemContractsUpgradeTxHash', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getName', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getPendingGovernor', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getPriorityQueueSize', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getPriorityTxMaxGasLimit', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getProposedUpgradeHash', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getProposedUpgradeTimestamp', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getProtocolVersion', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getSecurityCouncil', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getTotalBlocksCommitted', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getTotalBlocksExecuted', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getTotalBlocksVerified', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getTotalPriorityTxs', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getUpgradeProposalState', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getVerifier', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getVerifierParams', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isApprovedBySecurityCouncil', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isDiamondStorageFrozen', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isEthWithdrawalFinalized', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isFacetFreezable', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isFunctionFreezable', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isValidator', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'l2LogsRootHash', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'l2TransactionBaseCost', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'priorityQueueFrontOperation', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'proposeShadowUpgrade', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'proposeTransparentUpgrade', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'proveBlocks', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'proveL1ToL2TransactionStatus', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'proveL2LogInclusion', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'proveL2MessageInclusion', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'requestL2Transaction', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'revertBlocks', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'securityCouncilUpgradeApprove', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setPendingGovernor', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setPorterAvailability', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setPriorityTxMaxGasLimit', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setValidator', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'storedBlockHash', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'unfreezeDiamond', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'upgradeProposalHash', data: BytesLike): Result;

    events: {
        'BlockCommit(uint256,bytes32,bytes32)': EventFragment;
        'BlockExecution(uint256,bytes32,bytes32)': EventFragment;
        'BlocksRevert(uint256,uint256,uint256)': EventFragment;
        'BlocksVerification(uint256,uint256)': EventFragment;
        'CancelUpgradeProposal(uint256,bytes32)': EventFragment;
        'EthWithdrawalFinalized(address,uint256)': EventFragment;
        'ExecuteUpgrade(uint256,bytes32,bytes32)': EventFragment;
        'Freeze()': EventFragment;
        'IsPorterAvailableStatusUpdate(bool)': EventFragment;
        'NewGovernor(address,address)': EventFragment;
        'NewPendingGovernor(address,address)': EventFragment;
        'NewPriorityRequest(uint256,bytes32,uint64,tuple,bytes[])': EventFragment;
        'NewPriorityTxMaxGasLimit(uint256,uint256)': EventFragment;
        'ProposeShadowUpgrade(uint256,bytes32)': EventFragment;
        'ProposeTransparentUpgrade(tuple,uint256,bytes32)': EventFragment;
        'SecurityCouncilUpgradeApprove(uint256,bytes32)': EventFragment;
        'Unfreeze()': EventFragment;
        'ValidatorStatusUpdate(address,bool)': EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: 'BlockCommit'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'BlockExecution'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'BlocksRevert'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'BlocksVerification'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'CancelUpgradeProposal'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'EthWithdrawalFinalized'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'ExecuteUpgrade'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'Freeze'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'IsPorterAvailableStatusUpdate'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'NewGovernor'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'NewPendingGovernor'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'NewPriorityRequest'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'NewPriorityTxMaxGasLimit'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'ProposeShadowUpgrade'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'ProposeTransparentUpgrade'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SecurityCouncilUpgradeApprove'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'Unfreeze'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'ValidatorStatusUpdate'): EventFragment;
}

export class IZkSync extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    on(event: EventFilter | string, listener: Listener): this;
    once(event: EventFilter | string, listener: Listener): this;
    addListener(eventName: EventFilter | string, listener: Listener): this;
    removeAllListeners(eventName: EventFilter | string): this;
    removeListener(eventName: any, listener: Listener): this;

    interface: IZkSyncInterface;

    functions: {
        acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

        'acceptGovernor()'(overrides?: Overrides): Promise<ContractTransaction>;

        cancelUpgradeProposal(_proposedUpgradeHash: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

        'cancelUpgradeProposal(bytes32)'(
            _proposedUpgradeHash: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        commitBlocks(
            _lastCommittedBlockData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _newBlocksData: {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[],
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])'(
            _lastCommittedBlockData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _newBlocksData: {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[],
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        executeBlocks(
            _blocksData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'executeBlocks(tuple[])'(
            _blocksData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        executeUpgrade(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalSalt: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'executeUpgrade((tuple[],address,bytes),bytes32)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalSalt: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        facetAddress(
            _selector: BytesLike,
            overrides?: CallOverrides
        ): Promise<{
            facet: string;
            0: string;
        }>;

        'facetAddress(bytes4)'(
            _selector: BytesLike,
            overrides?: CallOverrides
        ): Promise<{
            facet: string;
            0: string;
        }>;

        facetAddresses(overrides?: CallOverrides): Promise<{
            facets: string[];
            0: string[];
        }>;

        'facetAddresses()'(overrides?: CallOverrides): Promise<{
            facets: string[];
            0: string[];
        }>;

        facetFunctionSelectors(
            _facet: string,
            overrides?: CallOverrides
        ): Promise<{
            0: string[];
        }>;

        'facetFunctionSelectors(address)'(
            _facet: string,
            overrides?: CallOverrides
        ): Promise<{
            0: string[];
        }>;

        facets(overrides?: CallOverrides): Promise<{
            0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
        }>;

        'facets()'(overrides?: CallOverrides): Promise<{
            0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
        }>;

        finalizeEthWithdrawal(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _message: BytesLike,
            _merkleProof: BytesLike[],
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])'(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _message: BytesLike,
            _merkleProof: BytesLike[],
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        freezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

        'freezeDiamond()'(overrides?: Overrides): Promise<ContractTransaction>;

        getAllowList(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getAllowList()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getCurrentProposalId(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getCurrentProposalId()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getFirstUnprocessedPriorityTx()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getGovernor(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getGovernor()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getL2BootloaderBytecodeHash()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getL2DefaultAccountBytecodeHash()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getL2SystemContractsUpgradeBlockNumber(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getL2SystemContractsUpgradeBlockNumber()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getL2SystemContractsUpgradeTxHash()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getName(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getName()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getPendingGovernor(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getPendingGovernor()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getPriorityQueueSize(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getPriorityQueueSize()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getPriorityTxMaxGasLimit()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getProposedUpgradeHash(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getProposedUpgradeHash()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getProposedUpgradeTimestamp()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getProtocolVersion(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getProtocolVersion()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getSecurityCouncil(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getSecurityCouncil()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getTotalBlocksCommitted(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getTotalBlocksCommitted()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getTotalBlocksExecuted(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getTotalBlocksExecuted()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getTotalBlocksVerified(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getTotalBlocksVerified()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getTotalPriorityTxs(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        'getTotalPriorityTxs()'(overrides?: CallOverrides): Promise<{
            0: BigNumber;
        }>;

        getUpgradeProposalState(overrides?: CallOverrides): Promise<{
            0: number;
        }>;

        'getUpgradeProposalState()'(overrides?: CallOverrides): Promise<{
            0: number;
        }>;

        getVerifier(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'getVerifier()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        getVerifierParams(overrides?: CallOverrides): Promise<{
            0: {
                recursionNodeLevelVkHash: string;
                recursionLeafLevelVkHash: string;
                recursionCircuitsSetVksHash: string;
                0: string;
                1: string;
                2: string;
            };
        }>;

        'getVerifierParams()'(overrides?: CallOverrides): Promise<{
            0: {
                recursionNodeLevelVkHash: string;
                recursionLeafLevelVkHash: string;
                recursionCircuitsSetVksHash: string;
                0: string;
                1: string;
                2: string;
            };
        }>;

        isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<{
            0: boolean;
        }>;

        'isApprovedBySecurityCouncil()'(overrides?: CallOverrides): Promise<{
            0: boolean;
        }>;

        isDiamondStorageFrozen(overrides?: CallOverrides): Promise<{
            0: boolean;
        }>;

        'isDiamondStorageFrozen()'(overrides?: CallOverrides): Promise<{
            0: boolean;
        }>;

        isEthWithdrawalFinalized(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        'isEthWithdrawalFinalized(uint256,uint256)'(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        isFacetFreezable(
            _facet: string,
            overrides?: CallOverrides
        ): Promise<{
            isFreezable: boolean;
            0: boolean;
        }>;

        'isFacetFreezable(address)'(
            _facet: string,
            overrides?: CallOverrides
        ): Promise<{
            isFreezable: boolean;
            0: boolean;
        }>;

        isFunctionFreezable(
            _selector: BytesLike,
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        'isFunctionFreezable(bytes4)'(
            _selector: BytesLike,
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        isValidator(
            _address: string,
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        'isValidator(address)'(
            _address: string,
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        l2LogsRootHash(
            _blockNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            hash: string;
            0: string;
        }>;

        'l2LogsRootHash(uint256)'(
            _blockNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            hash: string;
            0: string;
        }>;

        l2TransactionBaseCost(
            _gasPrice: BigNumberish,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            0: BigNumber;
        }>;

        'l2TransactionBaseCost(uint256,uint256,uint256)'(
            _gasPrice: BigNumberish,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            0: BigNumber;
        }>;

        priorityQueueFrontOperation(overrides?: CallOverrides): Promise<{
            0: {
                canonicalTxHash: string;
                expirationTimestamp: BigNumber;
                layer2Tip: BigNumber;
                0: string;
                1: BigNumber;
                2: BigNumber;
            };
        }>;

        'priorityQueueFrontOperation()'(overrides?: CallOverrides): Promise<{
            0: {
                canonicalTxHash: string;
                expirationTimestamp: BigNumber;
                layer2Tip: BigNumber;
                0: string;
                1: BigNumber;
                2: BigNumber;
            };
        }>;

        proposeShadowUpgrade(
            _proposalHash: BytesLike,
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'proposeShadowUpgrade(bytes32,uint40)'(
            _proposalHash: BytesLike,
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        proposeTransparentUpgrade(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'proposeTransparentUpgrade((tuple[],address,bytes),uint40)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        proveBlocks(
            _prevBlock: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _committedBlocks: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            _proof: {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            },
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))'(
            _prevBlock: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _committedBlocks: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            _proof: {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            },
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        proveL1ToL2TransactionStatus(
            _l2TxHash: BytesLike,
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _merkleProof: BytesLike[],
            _status: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        'proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)'(
            _l2TxHash: BytesLike,
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _merkleProof: BytesLike[],
            _status: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        proveL2LogInclusion(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _log: {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        'proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])'(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _log: {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        proveL2MessageInclusion(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _message: {
                txNumberInBlock: BigNumberish;
                sender: string;
                data: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        'proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])'(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _message: {
                txNumberInBlock: BigNumberish;
                sender: string;
                data: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<{
            0: boolean;
        }>;

        requestL2Transaction(
            _contractL2: string,
            _l2Value: BigNumberish,
            _calldata: BytesLike,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            _factoryDeps: BytesLike[],
            _refundRecipient: string,
            overrides?: PayableOverrides
        ): Promise<ContractTransaction>;

        'requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)'(
            _contractL2: string,
            _l2Value: BigNumberish,
            _calldata: BytesLike,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            _factoryDeps: BytesLike[],
            _refundRecipient: string,
            overrides?: PayableOverrides
        ): Promise<ContractTransaction>;

        revertBlocks(_newLastBlock: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

        'revertBlocks(uint256)'(_newLastBlock: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

        securityCouncilUpgradeApprove(
            _upgradeProposalHash: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'securityCouncilUpgradeApprove(bytes32)'(
            _upgradeProposalHash: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        setPendingGovernor(_newPendingGovernor: string, overrides?: Overrides): Promise<ContractTransaction>;

        'setPendingGovernor(address)'(_newPendingGovernor: string, overrides?: Overrides): Promise<ContractTransaction>;

        setPorterAvailability(_zkPorterIsAvailable: boolean, overrides?: Overrides): Promise<ContractTransaction>;

        'setPorterAvailability(bool)'(
            _zkPorterIsAvailable: boolean,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        setPriorityTxMaxGasLimit(
            _newPriorityTxMaxGasLimit: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        'setPriorityTxMaxGasLimit(uint256)'(
            _newPriorityTxMaxGasLimit: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        setValidator(_validator: string, _active: boolean, overrides?: Overrides): Promise<ContractTransaction>;

        'setValidator(address,bool)'(
            _validator: string,
            _active: boolean,
            overrides?: Overrides
        ): Promise<ContractTransaction>;

        storedBlockHash(
            _blockNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            0: string;
        }>;

        'storedBlockHash(uint256)'(
            _blockNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<{
            0: string;
        }>;

        unfreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

        'unfreezeDiamond()'(overrides?: Overrides): Promise<ContractTransaction>;

        upgradeProposalHash(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            _salt: BytesLike,
            overrides?: CallOverrides
        ): Promise<{
            0: string;
        }>;

        'upgradeProposalHash((tuple[],address,bytes),uint256,bytes32)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            _salt: BytesLike,
            overrides?: CallOverrides
        ): Promise<{
            0: string;
        }>;
    };

    acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    'acceptGovernor()'(overrides?: Overrides): Promise<ContractTransaction>;

    cancelUpgradeProposal(_proposedUpgradeHash: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

    'cancelUpgradeProposal(bytes32)'(
        _proposedUpgradeHash: BytesLike,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitBlocks(
        _lastCommittedBlockData: {
            blockNumber: BigNumberish;
            blockHash: BytesLike;
            indexRepeatedStorageChanges: BigNumberish;
            numberOfLayer1Txs: BigNumberish;
            priorityOperationsHash: BytesLike;
            l2LogsTreeRoot: BytesLike;
            timestamp: BigNumberish;
            commitment: BytesLike;
        },
        _newBlocksData: {
            blockNumber: BigNumberish;
            timestamp: BigNumberish;
            indexRepeatedStorageChanges: BigNumberish;
            newStateRoot: BytesLike;
            numberOfLayer1Txs: BigNumberish;
            l2LogsTreeRoot: BytesLike;
            priorityOperationsHash: BytesLike;
            initialStorageChanges: BytesLike;
            repeatedStorageChanges: BytesLike;
            l2Logs: BytesLike;
            l2ArbitraryLengthMessages: BytesLike[];
            factoryDeps: BytesLike[];
        }[],
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    'commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])'(
        _lastCommittedBlockData: {
            blockNumber: BigNumberish;
            blockHash: BytesLike;
            indexRepeatedStorageChanges: BigNumberish;
            numberOfLayer1Txs: BigNumberish;
            priorityOperationsHash: BytesLike;
            l2LogsTreeRoot: BytesLike;
            timestamp: BigNumberish;
            commitment: BytesLike;
        },
        _newBlocksData: {
            blockNumber: BigNumberish;
            timestamp: BigNumberish;
            indexRepeatedStorageChanges: BigNumberish;
            newStateRoot: BytesLike;
            numberOfLayer1Txs: BigNumberish;
            l2LogsTreeRoot: BytesLike;
            priorityOperationsHash: BytesLike;
            initialStorageChanges: BytesLike;
            repeatedStorageChanges: BytesLike;
            l2Logs: BytesLike;
            l2ArbitraryLengthMessages: BytesLike[];
            factoryDeps: BytesLike[];
        }[],
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeBlocks(
        _blocksData: {
            blockNumber: BigNumberish;
            blockHash: BytesLike;
            indexRepeatedStorageChanges: BigNumberish;
            numberOfLayer1Txs: BigNumberish;
            priorityOperationsHash: BytesLike;
            l2LogsTreeRoot: BytesLike;
            timestamp: BigNumberish;
            commitment: BytesLike;
        }[],
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    'executeBlocks(tuple[])'(
        _blocksData: {
            blockNumber: BigNumberish;
            blockHash: BytesLike;
            indexRepeatedStorageChanges: BigNumberish;
            numberOfLayer1Txs: BigNumberish;
            priorityOperationsHash: BytesLike;
            l2LogsTreeRoot: BytesLike;
            timestamp: BigNumberish;
            commitment: BytesLike;
        }[],
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeUpgrade(
        _diamondCut: {
            facetCuts: {
                facet: string;
                action: BigNumberish;
                isFreezable: boolean;
                selectors: BytesLike[];
            }[];
            initAddress: string;
            initCalldata: BytesLike;
        },
        _proposalSalt: BytesLike,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    'executeUpgrade((tuple[],address,bytes),bytes32)'(
        _diamondCut: {
            facetCuts: {
                facet: string;
                action: BigNumberish;
                isFreezable: boolean;
                selectors: BytesLike[];
            }[];
            initAddress: string;
            initCalldata: BytesLike;
        },
        _proposalSalt: BytesLike,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    facetAddress(_selector: BytesLike, overrides?: CallOverrides): Promise<string>;

    'facetAddress(bytes4)'(_selector: BytesLike, overrides?: CallOverrides): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    'facetAddresses()'(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(_facet: string, overrides?: CallOverrides): Promise<string[]>;

    'facetFunctionSelectors(address)'(_facet: string, overrides?: CallOverrides): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    'facets()'(overrides?: CallOverrides): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    finalizeEthWithdrawal(
        _l2BlockNumber: BigNumberish,
        _l2MessageIndex: BigNumberish,
        _l2TxNumberInBlock: BigNumberish,
        _message: BytesLike,
        _merkleProof: BytesLike[],
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    'finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])'(
        _l2BlockNumber: BigNumberish,
        _l2MessageIndex: BigNumberish,
        _l2TxNumberInBlock: BigNumberish,
        _message: BytesLike,
        _merkleProof: BytesLike[],
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    freezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

    'freezeDiamond()'(overrides?: Overrides): Promise<ContractTransaction>;

    getAllowList(overrides?: CallOverrides): Promise<string>;

    'getAllowList()'(overrides?: CallOverrides): Promise<string>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentProposalId()'(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

    'getFirstUnprocessedPriorityTx()'(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    'getGovernor()'(overrides?: CallOverrides): Promise<string>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

    'getL2BootloaderBytecodeHash()'(overrides?: CallOverrides): Promise<string>;

    getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

    'getL2DefaultAccountBytecodeHash()'(overrides?: CallOverrides): Promise<string>;

    getL2SystemContractsUpgradeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    'getL2SystemContractsUpgradeBlockNumber()'(overrides?: CallOverrides): Promise<BigNumber>;

    getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<string>;

    'getL2SystemContractsUpgradeTxHash()'(overrides?: CallOverrides): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    'getName()'(overrides?: CallOverrides): Promise<string>;

    getPendingGovernor(overrides?: CallOverrides): Promise<string>;

    'getPendingGovernor()'(overrides?: CallOverrides): Promise<string>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    'getPriorityQueueSize()'(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'getPriorityTxMaxGasLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedUpgradeHash(overrides?: CallOverrides): Promise<string>;

    'getProposedUpgradeHash()'(overrides?: CallOverrides): Promise<string>;

    getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'getProposedUpgradeTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    'getProtocolVersion()'(overrides?: CallOverrides): Promise<BigNumber>;

    getSecurityCouncil(overrides?: CallOverrides): Promise<string>;

    'getSecurityCouncil()'(overrides?: CallOverrides): Promise<string>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalBlocksCommitted()'(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalBlocksExecuted()'(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalBlocksVerified()'(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalPriorityTxs()'(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgradeProposalState(overrides?: CallOverrides): Promise<number>;

    'getUpgradeProposalState()'(overrides?: CallOverrides): Promise<number>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    'getVerifier()'(overrides?: CallOverrides): Promise<string>;

    getVerifierParams(overrides?: CallOverrides): Promise<{
        recursionNodeLevelVkHash: string;
        recursionLeafLevelVkHash: string;
        recursionCircuitsSetVksHash: string;
        0: string;
        1: string;
        2: string;
    }>;

    'getVerifierParams()'(overrides?: CallOverrides): Promise<{
        recursionNodeLevelVkHash: string;
        recursionLeafLevelVkHash: string;
        recursionCircuitsSetVksHash: string;
        0: string;
        1: string;
        2: string;
    }>;

    isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<boolean>;

    'isApprovedBySecurityCouncil()'(overrides?: CallOverrides): Promise<boolean>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

    'isDiamondStorageFrozen()'(overrides?: CallOverrides): Promise<boolean>;

    isEthWithdrawalFinalized(
        _l2BlockNumber: BigNumberish,
        _l2MessageIndex: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>;

    'isEthWithdrawalFinalized(uint256,uint256)'(
        _l2BlockNumber: BigNumberish,
        _l2MessageIndex: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>;

    isFacetFreezable(_facet: string, overrides?: CallOverrides): Promise<boolean>;

    'isFacetFreezable(address)'(_facet: string, overrides?: CallOverrides): Promise<boolean>;

    isFunctionFreezable(_selector: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'isFunctionFreezable(bytes4)'(_selector: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

    'isValidator(address)'(_address: string, overrides?: CallOverrides): Promise<boolean>;

    l2LogsRootHash(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'l2LogsRootHash(uint256)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;

    l2TransactionBaseCost(
        _gasPrice: BigNumberish,
        _l2GasLimit: BigNumberish,
        _l2GasPerPubdataByteLimit: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    'l2TransactionBaseCost(uint256,uint256,uint256)'(
        _gasPrice: BigNumberish,
        _l2GasLimit: BigNumberish,
        _l2GasPerPubdataByteLimit: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<{
        canonicalTxHash: string;
        expirationTimestamp: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
    }>;

    'priorityQueueFrontOperation()'(overrides?: CallOverrides): Promise<{
        canonicalTxHash: string;
        expirationTimestamp: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
    }>;

    proposeShadowUpgrade(
        _proposalHash: BytesLike,
        _proposalId: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    'proposeShadowUpgrade(bytes32,uint40)'(
        _proposalHash: BytesLike,
        _proposalId: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposeTransparentUpgrade(
        _diamondCut: {
            facetCuts: {
                facet: string;
                action: BigNumberish;
                isFreezable: boolean;
                selectors: BytesLike[];
            }[];
            initAddress: string;
            initCalldata: BytesLike;
        },
        _proposalId: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    'proposeTransparentUpgrade((tuple[],address,bytes),uint40)'(
        _diamondCut: {
            facetCuts: {
                facet: string;
                action: BigNumberish;
                isFreezable: boolean;
                selectors: BytesLike[];
            }[];
            initAddress: string;
            initCalldata: BytesLike;
        },
        _proposalId: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    proveBlocks(
        _prevBlock: {
            blockNumber: BigNumberish;
            blockHash: BytesLike;
            indexRepeatedStorageChanges: BigNumberish;
            numberOfLayer1Txs: BigNumberish;
            priorityOperationsHash: BytesLike;
            l2LogsTreeRoot: BytesLike;
            timestamp: BigNumberish;
            commitment: BytesLike;
        },
        _committedBlocks: {
            blockNumber: BigNumberish;
            blockHash: BytesLike;
            indexRepeatedStorageChanges: BigNumberish;
            numberOfLayer1Txs: BigNumberish;
            priorityOperationsHash: BytesLike;
            l2LogsTreeRoot: BytesLike;
            timestamp: BigNumberish;
            commitment: BytesLike;
        }[],
        _proof: {
            recursiveAggregationInput: BigNumberish[];
            serializedProof: BigNumberish[];
        },
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    'proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))'(
        _prevBlock: {
            blockNumber: BigNumberish;
            blockHash: BytesLike;
            indexRepeatedStorageChanges: BigNumberish;
            numberOfLayer1Txs: BigNumberish;
            priorityOperationsHash: BytesLike;
            l2LogsTreeRoot: BytesLike;
            timestamp: BigNumberish;
            commitment: BytesLike;
        },
        _committedBlocks: {
            blockNumber: BigNumberish;
            blockHash: BytesLike;
            indexRepeatedStorageChanges: BigNumberish;
            numberOfLayer1Txs: BigNumberish;
            priorityOperationsHash: BytesLike;
            l2LogsTreeRoot: BytesLike;
            timestamp: BigNumberish;
            commitment: BytesLike;
        }[],
        _proof: {
            recursiveAggregationInput: BigNumberish[];
            serializedProof: BigNumberish[];
        },
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    proveL1ToL2TransactionStatus(
        _l2TxHash: BytesLike,
        _l2BlockNumber: BigNumberish,
        _l2MessageIndex: BigNumberish,
        _l2TxNumberInBlock: BigNumberish,
        _merkleProof: BytesLike[],
        _status: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>;

    'proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)'(
        _l2TxHash: BytesLike,
        _l2BlockNumber: BigNumberish,
        _l2MessageIndex: BigNumberish,
        _l2TxNumberInBlock: BigNumberish,
        _merkleProof: BytesLike[],
        _status: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2LogInclusion(
        _blockNumber: BigNumberish,
        _index: BigNumberish,
        _log: {
            l2ShardId: BigNumberish;
            isService: boolean;
            txNumberInBlock: BigNumberish;
            sender: string;
            key: BytesLike;
            value: BytesLike;
        },
        _proof: BytesLike[],
        overrides?: CallOverrides
    ): Promise<boolean>;

    'proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])'(
        _blockNumber: BigNumberish,
        _index: BigNumberish,
        _log: {
            l2ShardId: BigNumberish;
            isService: boolean;
            txNumberInBlock: BigNumberish;
            sender: string;
            key: BytesLike;
            value: BytesLike;
        },
        _proof: BytesLike[],
        overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
        _blockNumber: BigNumberish,
        _index: BigNumberish,
        _message: {
            txNumberInBlock: BigNumberish;
            sender: string;
            data: BytesLike;
        },
        _proof: BytesLike[],
        overrides?: CallOverrides
    ): Promise<boolean>;

    'proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])'(
        _blockNumber: BigNumberish,
        _index: BigNumberish,
        _message: {
            txNumberInBlock: BigNumberish;
            sender: string;
            data: BytesLike;
        },
        _proof: BytesLike[],
        overrides?: CallOverrides
    ): Promise<boolean>;

    requestL2Transaction(
        _contractL2: string,
        _l2Value: BigNumberish,
        _calldata: BytesLike,
        _l2GasLimit: BigNumberish,
        _l2GasPerPubdataByteLimit: BigNumberish,
        _factoryDeps: BytesLike[],
        _refundRecipient: string,
        overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)'(
        _contractL2: string,
        _l2Value: BigNumberish,
        _calldata: BytesLike,
        _l2GasLimit: BigNumberish,
        _l2GasPerPubdataByteLimit: BigNumberish,
        _factoryDeps: BytesLike[],
        _refundRecipient: string,
        overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    revertBlocks(_newLastBlock: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'revertBlocks(uint256)'(_newLastBlock: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    securityCouncilUpgradeApprove(_upgradeProposalHash: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

    'securityCouncilUpgradeApprove(bytes32)'(
        _upgradeProposalHash: BytesLike,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPendingGovernor(_newPendingGovernor: string, overrides?: Overrides): Promise<ContractTransaction>;

    'setPendingGovernor(address)'(_newPendingGovernor: string, overrides?: Overrides): Promise<ContractTransaction>;

    setPorterAvailability(_zkPorterIsAvailable: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    'setPorterAvailability(bool)'(_zkPorterIsAvailable: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    setPriorityTxMaxGasLimit(
        _newPriorityTxMaxGasLimit: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setPriorityTxMaxGasLimit(uint256)'(
        _newPriorityTxMaxGasLimit: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidator(_validator: string, _active: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    'setValidator(address,bool)'(
        _validator: string,
        _active: boolean,
        overrides?: Overrides
    ): Promise<ContractTransaction>;

    storedBlockHash(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'storedBlockHash(uint256)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;

    unfreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

    'unfreezeDiamond()'(overrides?: Overrides): Promise<ContractTransaction>;

    upgradeProposalHash(
        _diamondCut: {
            facetCuts: {
                facet: string;
                action: BigNumberish;
                isFreezable: boolean;
                selectors: BytesLike[];
            }[];
            initAddress: string;
            initCalldata: BytesLike;
        },
        _proposalId: BigNumberish,
        _salt: BytesLike,
        overrides?: CallOverrides
    ): Promise<string>;

    'upgradeProposalHash((tuple[],address,bytes),uint256,bytes32)'(
        _diamondCut: {
            facetCuts: {
                facet: string;
                action: BigNumberish;
                isFreezable: boolean;
                selectors: BytesLike[];
            }[];
            initAddress: string;
            initCalldata: BytesLike;
        },
        _proposalId: BigNumberish,
        _salt: BytesLike,
        overrides?: CallOverrides
    ): Promise<string>;

    callStatic: {
        acceptGovernor(overrides?: CallOverrides): Promise<void>;

        'acceptGovernor()'(overrides?: CallOverrides): Promise<void>;

        cancelUpgradeProposal(_proposedUpgradeHash: BytesLike, overrides?: CallOverrides): Promise<void>;

        'cancelUpgradeProposal(bytes32)'(_proposedUpgradeHash: BytesLike, overrides?: CallOverrides): Promise<void>;

        commitBlocks(
            _lastCommittedBlockData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _newBlocksData: {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[],
            overrides?: CallOverrides
        ): Promise<void>;

        'commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])'(
            _lastCommittedBlockData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _newBlocksData: {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[],
            overrides?: CallOverrides
        ): Promise<void>;

        executeBlocks(
            _blocksData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            overrides?: CallOverrides
        ): Promise<void>;

        'executeBlocks(tuple[])'(
            _blocksData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            overrides?: CallOverrides
        ): Promise<void>;

        executeUpgrade(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalSalt: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;

        'executeUpgrade((tuple[],address,bytes),bytes32)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalSalt: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;

        facetAddress(_selector: BytesLike, overrides?: CallOverrides): Promise<string>;

        'facetAddress(bytes4)'(_selector: BytesLike, overrides?: CallOverrides): Promise<string>;

        facetAddresses(overrides?: CallOverrides): Promise<string[]>;

        'facetAddresses()'(overrides?: CallOverrides): Promise<string[]>;

        facetFunctionSelectors(_facet: string, overrides?: CallOverrides): Promise<string[]>;

        'facetFunctionSelectors(address)'(_facet: string, overrides?: CallOverrides): Promise<string[]>;

        facets(overrides?: CallOverrides): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

        'facets()'(overrides?: CallOverrides): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

        finalizeEthWithdrawal(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _message: BytesLike,
            _merkleProof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<void>;

        'finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])'(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _message: BytesLike,
            _merkleProof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<void>;

        freezeDiamond(overrides?: CallOverrides): Promise<void>;

        'freezeDiamond()'(overrides?: CallOverrides): Promise<void>;

        getAllowList(overrides?: CallOverrides): Promise<string>;

        'getAllowList()'(overrides?: CallOverrides): Promise<string>;

        getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

        'getCurrentProposalId()'(overrides?: CallOverrides): Promise<BigNumber>;

        getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

        'getFirstUnprocessedPriorityTx()'(overrides?: CallOverrides): Promise<BigNumber>;

        getGovernor(overrides?: CallOverrides): Promise<string>;

        'getGovernor()'(overrides?: CallOverrides): Promise<string>;

        getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

        'getL2BootloaderBytecodeHash()'(overrides?: CallOverrides): Promise<string>;

        getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

        'getL2DefaultAccountBytecodeHash()'(overrides?: CallOverrides): Promise<string>;

        getL2SystemContractsUpgradeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

        'getL2SystemContractsUpgradeBlockNumber()'(overrides?: CallOverrides): Promise<BigNumber>;

        getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<string>;

        'getL2SystemContractsUpgradeTxHash()'(overrides?: CallOverrides): Promise<string>;

        getName(overrides?: CallOverrides): Promise<string>;

        'getName()'(overrides?: CallOverrides): Promise<string>;

        getPendingGovernor(overrides?: CallOverrides): Promise<string>;

        'getPendingGovernor()'(overrides?: CallOverrides): Promise<string>;

        getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

        'getPriorityQueueSize()'(overrides?: CallOverrides): Promise<BigNumber>;

        getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

        'getPriorityTxMaxGasLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

        getProposedUpgradeHash(overrides?: CallOverrides): Promise<string>;

        'getProposedUpgradeHash()'(overrides?: CallOverrides): Promise<string>;

        getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

        'getProposedUpgradeTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

        getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

        'getProtocolVersion()'(overrides?: CallOverrides): Promise<BigNumber>;

        getSecurityCouncil(overrides?: CallOverrides): Promise<string>;

        'getSecurityCouncil()'(overrides?: CallOverrides): Promise<string>;

        getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

        'getTotalBlocksCommitted()'(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

        'getTotalBlocksExecuted()'(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

        'getTotalBlocksVerified()'(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

        'getTotalPriorityTxs()'(overrides?: CallOverrides): Promise<BigNumber>;

        getUpgradeProposalState(overrides?: CallOverrides): Promise<number>;

        'getUpgradeProposalState()'(overrides?: CallOverrides): Promise<number>;

        getVerifier(overrides?: CallOverrides): Promise<string>;

        'getVerifier()'(overrides?: CallOverrides): Promise<string>;

        getVerifierParams(overrides?: CallOverrides): Promise<{
            recursionNodeLevelVkHash: string;
            recursionLeafLevelVkHash: string;
            recursionCircuitsSetVksHash: string;
            0: string;
            1: string;
            2: string;
        }>;

        'getVerifierParams()'(overrides?: CallOverrides): Promise<{
            recursionNodeLevelVkHash: string;
            recursionLeafLevelVkHash: string;
            recursionCircuitsSetVksHash: string;
            0: string;
            1: string;
            2: string;
        }>;

        isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<boolean>;

        'isApprovedBySecurityCouncil()'(overrides?: CallOverrides): Promise<boolean>;

        isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

        'isDiamondStorageFrozen()'(overrides?: CallOverrides): Promise<boolean>;

        isEthWithdrawalFinalized(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        'isEthWithdrawalFinalized(uint256,uint256)'(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        isFacetFreezable(_facet: string, overrides?: CallOverrides): Promise<boolean>;

        'isFacetFreezable(address)'(_facet: string, overrides?: CallOverrides): Promise<boolean>;

        isFunctionFreezable(_selector: BytesLike, overrides?: CallOverrides): Promise<boolean>;

        'isFunctionFreezable(bytes4)'(_selector: BytesLike, overrides?: CallOverrides): Promise<boolean>;

        isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

        'isValidator(address)'(_address: string, overrides?: CallOverrides): Promise<boolean>;

        l2LogsRootHash(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;

        'l2LogsRootHash(uint256)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;

        l2TransactionBaseCost(
            _gasPrice: BigNumberish,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        'l2TransactionBaseCost(uint256,uint256,uint256)'(
            _gasPrice: BigNumberish,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        priorityQueueFrontOperation(overrides?: CallOverrides): Promise<{
            canonicalTxHash: string;
            expirationTimestamp: BigNumber;
            layer2Tip: BigNumber;
            0: string;
            1: BigNumber;
            2: BigNumber;
        }>;

        'priorityQueueFrontOperation()'(overrides?: CallOverrides): Promise<{
            canonicalTxHash: string;
            expirationTimestamp: BigNumber;
            layer2Tip: BigNumber;
            0: string;
            1: BigNumber;
            2: BigNumber;
        }>;

        proposeShadowUpgrade(
            _proposalHash: BytesLike,
            _proposalId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        'proposeShadowUpgrade(bytes32,uint40)'(
            _proposalHash: BytesLike,
            _proposalId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        proposeTransparentUpgrade(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        'proposeTransparentUpgrade((tuple[],address,bytes),uint40)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        proveBlocks(
            _prevBlock: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _committedBlocks: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            _proof: {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            },
            overrides?: CallOverrides
        ): Promise<void>;

        'proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))'(
            _prevBlock: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _committedBlocks: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            _proof: {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            },
            overrides?: CallOverrides
        ): Promise<void>;

        proveL1ToL2TransactionStatus(
            _l2TxHash: BytesLike,
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _merkleProof: BytesLike[],
            _status: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        'proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)'(
            _l2TxHash: BytesLike,
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _merkleProof: BytesLike[],
            _status: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        proveL2LogInclusion(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _log: {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<boolean>;

        'proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])'(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _log: {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<boolean>;

        proveL2MessageInclusion(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _message: {
                txNumberInBlock: BigNumberish;
                sender: string;
                data: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<boolean>;

        'proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])'(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _message: {
                txNumberInBlock: BigNumberish;
                sender: string;
                data: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<boolean>;

        requestL2Transaction(
            _contractL2: string,
            _l2Value: BigNumberish,
            _calldata: BytesLike,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            _factoryDeps: BytesLike[],
            _refundRecipient: string,
            overrides?: CallOverrides
        ): Promise<string>;

        'requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)'(
            _contractL2: string,
            _l2Value: BigNumberish,
            _calldata: BytesLike,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            _factoryDeps: BytesLike[],
            _refundRecipient: string,
            overrides?: CallOverrides
        ): Promise<string>;

        revertBlocks(_newLastBlock: BigNumberish, overrides?: CallOverrides): Promise<void>;

        'revertBlocks(uint256)'(_newLastBlock: BigNumberish, overrides?: CallOverrides): Promise<void>;

        securityCouncilUpgradeApprove(_upgradeProposalHash: BytesLike, overrides?: CallOverrides): Promise<void>;

        'securityCouncilUpgradeApprove(bytes32)'(
            _upgradeProposalHash: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;

        setPendingGovernor(_newPendingGovernor: string, overrides?: CallOverrides): Promise<void>;

        'setPendingGovernor(address)'(_newPendingGovernor: string, overrides?: CallOverrides): Promise<void>;

        setPorterAvailability(_zkPorterIsAvailable: boolean, overrides?: CallOverrides): Promise<void>;

        'setPorterAvailability(bool)'(_zkPorterIsAvailable: boolean, overrides?: CallOverrides): Promise<void>;

        setPriorityTxMaxGasLimit(_newPriorityTxMaxGasLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;

        'setPriorityTxMaxGasLimit(uint256)'(
            _newPriorityTxMaxGasLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        setValidator(_validator: string, _active: boolean, overrides?: CallOverrides): Promise<void>;

        'setValidator(address,bool)'(_validator: string, _active: boolean, overrides?: CallOverrides): Promise<void>;

        storedBlockHash(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;

        'storedBlockHash(uint256)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;

        unfreezeDiamond(overrides?: CallOverrides): Promise<void>;

        'unfreezeDiamond()'(overrides?: CallOverrides): Promise<void>;

        upgradeProposalHash(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            _salt: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        'upgradeProposalHash((tuple[],address,bytes),uint256,bytes32)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            _salt: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;
    };

    filters: {
        BlockCommit(
            blockNumber: BigNumberish | null,
            blockHash: BytesLike | null,
            commitment: BytesLike | null
        ): EventFilter;

        BlockExecution(
            blockNumber: BigNumberish | null,
            blockHash: BytesLike | null,
            commitment: BytesLike | null
        ): EventFilter;

        BlocksRevert(totalBlocksCommitted: null, totalBlocksVerified: null, totalBlocksExecuted: null): EventFilter;

        BlocksVerification(
            previousLastVerifiedBlock: BigNumberish | null,
            currentLastVerifiedBlock: BigNumberish | null
        ): EventFilter;

        CancelUpgradeProposal(proposalId: BigNumberish | null, proposalHash: BytesLike | null): EventFilter;

        EthWithdrawalFinalized(to: string | null, amount: null): EventFilter;

        ExecuteUpgrade(
            proposalId: BigNumberish | null,
            proposalHash: BytesLike | null,
            proposalSalt: null
        ): EventFilter;

        Freeze(): EventFilter;

        IsPorterAvailableStatusUpdate(isPorterAvailable: null): EventFilter;

        NewGovernor(oldGovernor: string | null, newGovernor: string | null): EventFilter;

        NewPendingGovernor(oldPendingGovernor: string | null, newPendingGovernor: string | null): EventFilter;

        NewPriorityRequest(
            txId: null,
            txHash: null,
            expirationTimestamp: null,
            transaction: null,
            factoryDeps: null
        ): EventFilter;

        NewPriorityTxMaxGasLimit(oldPriorityTxMaxGasLimit: null, newPriorityTxMaxGasLimit: null): EventFilter;

        ProposeShadowUpgrade(proposalId: BigNumberish | null, proposalHash: BytesLike | null): EventFilter;

        ProposeTransparentUpgrade(diamondCut: null, proposalId: BigNumberish | null, proposalSalt: null): EventFilter;

        SecurityCouncilUpgradeApprove(proposalId: BigNumberish | null, proposalHash: BytesLike | null): EventFilter;

        Unfreeze(): EventFilter;

        ValidatorStatusUpdate(validatorAddress: string | null, isActive: null): EventFilter;
    };

    estimateGas: {
        acceptGovernor(overrides?: Overrides): Promise<BigNumber>;

        'acceptGovernor()'(overrides?: Overrides): Promise<BigNumber>;

        cancelUpgradeProposal(_proposedUpgradeHash: BytesLike, overrides?: Overrides): Promise<BigNumber>;

        'cancelUpgradeProposal(bytes32)'(_proposedUpgradeHash: BytesLike, overrides?: Overrides): Promise<BigNumber>;

        commitBlocks(
            _lastCommittedBlockData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _newBlocksData: {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[],
            overrides?: Overrides
        ): Promise<BigNumber>;

        'commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])'(
            _lastCommittedBlockData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _newBlocksData: {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[],
            overrides?: Overrides
        ): Promise<BigNumber>;

        executeBlocks(
            _blocksData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            overrides?: Overrides
        ): Promise<BigNumber>;

        'executeBlocks(tuple[])'(
            _blocksData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            overrides?: Overrides
        ): Promise<BigNumber>;

        executeUpgrade(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalSalt: BytesLike,
            overrides?: Overrides
        ): Promise<BigNumber>;

        'executeUpgrade((tuple[],address,bytes),bytes32)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalSalt: BytesLike,
            overrides?: Overrides
        ): Promise<BigNumber>;

        facetAddress(_selector: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        'facetAddress(bytes4)'(_selector: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

        'facetAddresses()'(overrides?: CallOverrides): Promise<BigNumber>;

        facetFunctionSelectors(_facet: string, overrides?: CallOverrides): Promise<BigNumber>;

        'facetFunctionSelectors(address)'(_facet: string, overrides?: CallOverrides): Promise<BigNumber>;

        facets(overrides?: CallOverrides): Promise<BigNumber>;

        'facets()'(overrides?: CallOverrides): Promise<BigNumber>;

        finalizeEthWithdrawal(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _message: BytesLike,
            _merkleProof: BytesLike[],
            overrides?: Overrides
        ): Promise<BigNumber>;

        'finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])'(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _message: BytesLike,
            _merkleProof: BytesLike[],
            overrides?: Overrides
        ): Promise<BigNumber>;

        freezeDiamond(overrides?: Overrides): Promise<BigNumber>;

        'freezeDiamond()'(overrides?: Overrides): Promise<BigNumber>;

        getAllowList(overrides?: CallOverrides): Promise<BigNumber>;

        'getAllowList()'(overrides?: CallOverrides): Promise<BigNumber>;

        getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

        'getCurrentProposalId()'(overrides?: CallOverrides): Promise<BigNumber>;

        getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

        'getFirstUnprocessedPriorityTx()'(overrides?: CallOverrides): Promise<BigNumber>;

        getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

        'getGovernor()'(overrides?: CallOverrides): Promise<BigNumber>;

        getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

        'getL2BootloaderBytecodeHash()'(overrides?: CallOverrides): Promise<BigNumber>;

        getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

        'getL2DefaultAccountBytecodeHash()'(overrides?: CallOverrides): Promise<BigNumber>;

        getL2SystemContractsUpgradeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

        'getL2SystemContractsUpgradeBlockNumber()'(overrides?: CallOverrides): Promise<BigNumber>;

        getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<BigNumber>;

        'getL2SystemContractsUpgradeTxHash()'(overrides?: CallOverrides): Promise<BigNumber>;

        getName(overrides?: CallOverrides): Promise<BigNumber>;

        'getName()'(overrides?: CallOverrides): Promise<BigNumber>;

        getPendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

        'getPendingGovernor()'(overrides?: CallOverrides): Promise<BigNumber>;

        getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

        'getPriorityQueueSize()'(overrides?: CallOverrides): Promise<BigNumber>;

        getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

        'getPriorityTxMaxGasLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

        getProposedUpgradeHash(overrides?: CallOverrides): Promise<BigNumber>;

        'getProposedUpgradeHash()'(overrides?: CallOverrides): Promise<BigNumber>;

        getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

        'getProposedUpgradeTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

        getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

        'getProtocolVersion()'(overrides?: CallOverrides): Promise<BigNumber>;

        getSecurityCouncil(overrides?: CallOverrides): Promise<BigNumber>;

        'getSecurityCouncil()'(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

        'getTotalBlocksCommitted()'(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

        'getTotalBlocksExecuted()'(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

        'getTotalBlocksVerified()'(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

        'getTotalPriorityTxs()'(overrides?: CallOverrides): Promise<BigNumber>;

        getUpgradeProposalState(overrides?: CallOverrides): Promise<BigNumber>;

        'getUpgradeProposalState()'(overrides?: CallOverrides): Promise<BigNumber>;

        getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

        'getVerifier()'(overrides?: CallOverrides): Promise<BigNumber>;

        getVerifierParams(overrides?: CallOverrides): Promise<BigNumber>;

        'getVerifierParams()'(overrides?: CallOverrides): Promise<BigNumber>;

        isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<BigNumber>;

        'isApprovedBySecurityCouncil()'(overrides?: CallOverrides): Promise<BigNumber>;

        isDiamondStorageFrozen(overrides?: CallOverrides): Promise<BigNumber>;

        'isDiamondStorageFrozen()'(overrides?: CallOverrides): Promise<BigNumber>;

        isEthWithdrawalFinalized(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        'isEthWithdrawalFinalized(uint256,uint256)'(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isFacetFreezable(_facet: string, overrides?: CallOverrides): Promise<BigNumber>;

        'isFacetFreezable(address)'(_facet: string, overrides?: CallOverrides): Promise<BigNumber>;

        isFunctionFreezable(_selector: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        'isFunctionFreezable(bytes4)'(_selector: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        isValidator(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

        'isValidator(address)'(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

        l2LogsRootHash(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        'l2LogsRootHash(uint256)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        l2TransactionBaseCost(
            _gasPrice: BigNumberish,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        'l2TransactionBaseCost(uint256,uint256,uint256)'(
            _gasPrice: BigNumberish,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        priorityQueueFrontOperation(overrides?: CallOverrides): Promise<BigNumber>;

        'priorityQueueFrontOperation()'(overrides?: CallOverrides): Promise<BigNumber>;

        proposeShadowUpgrade(
            _proposalHash: BytesLike,
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>;

        'proposeShadowUpgrade(bytes32,uint40)'(
            _proposalHash: BytesLike,
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>;

        proposeTransparentUpgrade(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>;

        'proposeTransparentUpgrade((tuple[],address,bytes),uint40)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>;

        proveBlocks(
            _prevBlock: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _committedBlocks: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            _proof: {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            },
            overrides?: Overrides
        ): Promise<BigNumber>;

        'proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))'(
            _prevBlock: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _committedBlocks: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            _proof: {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            },
            overrides?: Overrides
        ): Promise<BigNumber>;

        proveL1ToL2TransactionStatus(
            _l2TxHash: BytesLike,
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _merkleProof: BytesLike[],
            _status: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        'proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)'(
            _l2TxHash: BytesLike,
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _merkleProof: BytesLike[],
            _status: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        proveL2LogInclusion(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _log: {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        'proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])'(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _log: {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        proveL2MessageInclusion(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _message: {
                txNumberInBlock: BigNumberish;
                sender: string;
                data: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        'proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])'(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _message: {
                txNumberInBlock: BigNumberish;
                sender: string;
                data: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        requestL2Transaction(
            _contractL2: string,
            _l2Value: BigNumberish,
            _calldata: BytesLike,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            _factoryDeps: BytesLike[],
            _refundRecipient: string,
            overrides?: PayableOverrides
        ): Promise<BigNumber>;

        'requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)'(
            _contractL2: string,
            _l2Value: BigNumberish,
            _calldata: BytesLike,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            _factoryDeps: BytesLike[],
            _refundRecipient: string,
            overrides?: PayableOverrides
        ): Promise<BigNumber>;

        revertBlocks(_newLastBlock: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        'revertBlocks(uint256)'(_newLastBlock: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        securityCouncilUpgradeApprove(_upgradeProposalHash: BytesLike, overrides?: Overrides): Promise<BigNumber>;

        'securityCouncilUpgradeApprove(bytes32)'(
            _upgradeProposalHash: BytesLike,
            overrides?: Overrides
        ): Promise<BigNumber>;

        setPendingGovernor(_newPendingGovernor: string, overrides?: Overrides): Promise<BigNumber>;

        'setPendingGovernor(address)'(_newPendingGovernor: string, overrides?: Overrides): Promise<BigNumber>;

        setPorterAvailability(_zkPorterIsAvailable: boolean, overrides?: Overrides): Promise<BigNumber>;

        'setPorterAvailability(bool)'(_zkPorterIsAvailable: boolean, overrides?: Overrides): Promise<BigNumber>;

        setPriorityTxMaxGasLimit(_newPriorityTxMaxGasLimit: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        'setPriorityTxMaxGasLimit(uint256)'(
            _newPriorityTxMaxGasLimit: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>;

        setValidator(_validator: string, _active: boolean, overrides?: Overrides): Promise<BigNumber>;

        'setValidator(address,bool)'(_validator: string, _active: boolean, overrides?: Overrides): Promise<BigNumber>;

        storedBlockHash(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        'storedBlockHash(uint256)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        unfreezeDiamond(overrides?: Overrides): Promise<BigNumber>;

        'unfreezeDiamond()'(overrides?: Overrides): Promise<BigNumber>;

        upgradeProposalHash(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            _salt: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        'upgradeProposalHash((tuple[],address,bytes),uint256,bytes32)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            _salt: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        acceptGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

        'acceptGovernor()'(overrides?: Overrides): Promise<PopulatedTransaction>;

        cancelUpgradeProposal(_proposedUpgradeHash: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>;

        'cancelUpgradeProposal(bytes32)'(
            _proposedUpgradeHash: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        commitBlocks(
            _lastCommittedBlockData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _newBlocksData: {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[],
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])'(
            _lastCommittedBlockData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _newBlocksData: {
                blockNumber: BigNumberish;
                timestamp: BigNumberish;
                indexRepeatedStorageChanges: BigNumberish;
                newStateRoot: BytesLike;
                numberOfLayer1Txs: BigNumberish;
                l2LogsTreeRoot: BytesLike;
                priorityOperationsHash: BytesLike;
                initialStorageChanges: BytesLike;
                repeatedStorageChanges: BytesLike;
                l2Logs: BytesLike;
                l2ArbitraryLengthMessages: BytesLike[];
                factoryDeps: BytesLike[];
            }[],
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        executeBlocks(
            _blocksData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'executeBlocks(tuple[])'(
            _blocksData: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        executeUpgrade(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalSalt: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'executeUpgrade((tuple[],address,bytes),bytes32)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalSalt: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        facetAddress(_selector: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'facetAddress(bytes4)'(_selector: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'facetAddresses()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        facetFunctionSelectors(_facet: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'facetFunctionSelectors(address)'(_facet: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'facets()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        finalizeEthWithdrawal(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _message: BytesLike,
            _merkleProof: BytesLike[],
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])'(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _message: BytesLike,
            _merkleProof: BytesLike[],
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        freezeDiamond(overrides?: Overrides): Promise<PopulatedTransaction>;

        'freezeDiamond()'(overrides?: Overrides): Promise<PopulatedTransaction>;

        getAllowList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getAllowList()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getCurrentProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getCurrentProposalId()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getFirstUnprocessedPriorityTx()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getGovernor()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getL2BootloaderBytecodeHash()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getL2DefaultAccountBytecodeHash()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getL2SystemContractsUpgradeBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getL2SystemContractsUpgradeBlockNumber()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getL2SystemContractsUpgradeTxHash()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getName()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getPendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getPendingGovernor()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getPriorityQueueSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getPriorityQueueSize()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getPriorityTxMaxGasLimit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getProposedUpgradeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getProposedUpgradeHash()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getProposedUpgradeTimestamp()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getProtocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getProtocolVersion()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getSecurityCouncil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getSecurityCouncil()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getTotalBlocksCommitted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getTotalBlocksCommitted()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getTotalBlocksExecuted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getTotalBlocksExecuted()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getTotalBlocksVerified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getTotalBlocksVerified()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getTotalPriorityTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getTotalPriorityTxs()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getUpgradeProposalState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getUpgradeProposalState()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getVerifier()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getVerifierParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getVerifierParams()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'isApprovedBySecurityCouncil()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isDiamondStorageFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'isDiamondStorageFrozen()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isEthWithdrawalFinalized(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        'isEthWithdrawalFinalized(uint256,uint256)'(
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isFacetFreezable(_facet: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'isFacetFreezable(address)'(_facet: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isFunctionFreezable(_selector: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'isFunctionFreezable(bytes4)'(_selector: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isValidator(_address: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'isValidator(address)'(_address: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        l2LogsRootHash(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'l2LogsRootHash(uint256)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        l2TransactionBaseCost(
            _gasPrice: BigNumberish,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        'l2TransactionBaseCost(uint256,uint256,uint256)'(
            _gasPrice: BigNumberish,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        priorityQueueFrontOperation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'priorityQueueFrontOperation()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        proposeShadowUpgrade(
            _proposalHash: BytesLike,
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'proposeShadowUpgrade(bytes32,uint40)'(
            _proposalHash: BytesLike,
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        proposeTransparentUpgrade(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'proposeTransparentUpgrade((tuple[],address,bytes),uint40)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        proveBlocks(
            _prevBlock: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _committedBlocks: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            _proof: {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            },
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))'(
            _prevBlock: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            },
            _committedBlocks: {
                blockNumber: BigNumberish;
                blockHash: BytesLike;
                indexRepeatedStorageChanges: BigNumberish;
                numberOfLayer1Txs: BigNumberish;
                priorityOperationsHash: BytesLike;
                l2LogsTreeRoot: BytesLike;
                timestamp: BigNumberish;
                commitment: BytesLike;
            }[],
            _proof: {
                recursiveAggregationInput: BigNumberish[];
                serializedProof: BigNumberish[];
            },
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        proveL1ToL2TransactionStatus(
            _l2TxHash: BytesLike,
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _merkleProof: BytesLike[],
            _status: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        'proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)'(
            _l2TxHash: BytesLike,
            _l2BlockNumber: BigNumberish,
            _l2MessageIndex: BigNumberish,
            _l2TxNumberInBlock: BigNumberish,
            _merkleProof: BytesLike[],
            _status: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        proveL2LogInclusion(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _log: {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        'proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])'(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _log: {
                l2ShardId: BigNumberish;
                isService: boolean;
                txNumberInBlock: BigNumberish;
                sender: string;
                key: BytesLike;
                value: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        proveL2MessageInclusion(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _message: {
                txNumberInBlock: BigNumberish;
                sender: string;
                data: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        'proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])'(
            _blockNumber: BigNumberish,
            _index: BigNumberish,
            _message: {
                txNumberInBlock: BigNumberish;
                sender: string;
                data: BytesLike;
            },
            _proof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        requestL2Transaction(
            _contractL2: string,
            _l2Value: BigNumberish,
            _calldata: BytesLike,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            _factoryDeps: BytesLike[],
            _refundRecipient: string,
            overrides?: PayableOverrides
        ): Promise<PopulatedTransaction>;

        'requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)'(
            _contractL2: string,
            _l2Value: BigNumberish,
            _calldata: BytesLike,
            _l2GasLimit: BigNumberish,
            _l2GasPerPubdataByteLimit: BigNumberish,
            _factoryDeps: BytesLike[],
            _refundRecipient: string,
            overrides?: PayableOverrides
        ): Promise<PopulatedTransaction>;

        revertBlocks(_newLastBlock: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

        'revertBlocks(uint256)'(_newLastBlock: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

        securityCouncilUpgradeApprove(
            _upgradeProposalHash: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'securityCouncilUpgradeApprove(bytes32)'(
            _upgradeProposalHash: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        setPendingGovernor(_newPendingGovernor: string, overrides?: Overrides): Promise<PopulatedTransaction>;

        'setPendingGovernor(address)'(
            _newPendingGovernor: string,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        setPorterAvailability(_zkPorterIsAvailable: boolean, overrides?: Overrides): Promise<PopulatedTransaction>;

        'setPorterAvailability(bool)'(
            _zkPorterIsAvailable: boolean,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        setPriorityTxMaxGasLimit(
            _newPriorityTxMaxGasLimit: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        'setPriorityTxMaxGasLimit(uint256)'(
            _newPriorityTxMaxGasLimit: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        setValidator(_validator: string, _active: boolean, overrides?: Overrides): Promise<PopulatedTransaction>;

        'setValidator(address,bool)'(
            _validator: string,
            _active: boolean,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>;

        storedBlockHash(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'storedBlockHash(uint256)'(
            _blockNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        unfreezeDiamond(overrides?: Overrides): Promise<PopulatedTransaction>;

        'unfreezeDiamond()'(overrides?: Overrides): Promise<PopulatedTransaction>;

        upgradeProposalHash(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            _salt: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        'upgradeProposalHash((tuple[],address,bytes),uint256,bytes32)'(
            _diamondCut: {
                facetCuts: {
                    facet: string;
                    action: BigNumberish;
                    isFreezable: boolean;
                    selectors: BytesLike[];
                }[];
                initAddress: string;
                initCalldata: BytesLike;
            },
            _proposalId: BigNumberish,
            _salt: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    };
}
