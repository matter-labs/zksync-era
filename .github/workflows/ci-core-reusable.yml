name: Workflow template for CI jobs for Core Components
on:
  workflow_call:
    secrets:
      ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE:
        description: "Token which will be provided to clone private repos"
        required: true
    inputs:
      compilers:
        description: "JSON of required compilers and their versions"
        type: string
        required: false
        default: '[{ "zksolc": ["1.3.14", "1.3.16", "1.3.17", "1.3.1", "1.3.7", "1.3.18", "1.3.19", "1.3.21"] } , { "zkvyper": ["1.3.13"] }]'

env:
  RUST_BACKTRACE: 1
  PASSED_ENV_VARS: RUST_BACKTRACE

jobs:
  lint:
    name: lint
    uses: ./.github/workflows/ci-core-lint-reusable.yml
    secrets:
      ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE: ${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}
  unit-tests:
    runs-on: [ matterlabs-ci-runner-highmem-long ]

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo IN_DOCKER=1 >> .env
          echo "SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage" >> .env
          echo "SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com" >> .env
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> .env
          echo "RUSTC_WRAPPER=sccache" >> .env
          echo RUN_CONTRACT_VERIFICATION_TEST=true >> .env
          echo "GITHUB_TOKEN=${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}" >> .env

      # TODO: Remove when we after upgrade of hardhat-plugins
      - name: pre-download compilers
        run: |
          # Download needed versions of vyper compiler
          # Not sanitized due to unconventional path and tags
          mkdir -p ./hardhat-nodejs/compilers-v2/vyper/linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10 https://github.com/vyperlang/vyper/releases/download/v0.3.10/vyper.0.3.10+commit.91361694.linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3 https://github.com/vyperlang/vyper/releases/download/v0.3.3/vyper.0.3.3+commit.48e326f0.linux
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3

          COMPILERS_JSON='${{ inputs.compilers }}'
          echo "$COMPILERS_JSON" | jq -r '.[] | to_entries[] | .key as $compiler | .value[] | "\(.),\($compiler)"' | while IFS=, read -r version compiler; do
            mkdir -p "./hardhat-nodejs/compilers-v2/$compiler"
            wget -nv -O "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}" "https://github.com/matter-labs/${compiler}-bin/releases/download/v${version}/${compiler}-linux-amd64-musl-v${version}"
            chmod +x "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}"
          done

      - name: Start services
        run: |
          ci_localnet_up

      - name: git config for cloning private repos
        run: |
          ci_run git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf ssh://git@github.com/
          ci_run git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf https://github.com/

      - name: Init
        run: |
          ci_run run_retried rustup show

      - name: Install zkstack
        run: |
          ci_run ./zkstack_cli/zkstackup/install -g --path ./zkstack_cli/zkstackup/zkstackup
          ci_run zkstackup -g --local

      - name: Build contracts
        run: |
          ci_run zkstack dev contracts

      - name: Use Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4
        with:
          node-version: 18.20.8

      - name: Install yarn
        run: |
          npm install -g yarn

      - name: Check contracts hashes
        working-directory: contracts
        run: |
          yarn calculate-hashes:check

      - name: Download compilers for contract verifier tests
        run: ci_run zkstack contract-verifier init --zksolc-version=v1.5.10 --zkvyper-version=v1.5.4 --solc-version=0.8.26 --vyper-version=v0.3.10 --era-vm-solc-version=0.8.26-1.0.1 --only --chain era

      - name: Rust unit tests
        run: |
          ci_run zkstack dev test rust
          # Benchmarks are not tested by `cargo nextest` unless specified explicitly, and even then `criterion` harness is incompatible
          # with how `cargo nextest` runs tests. Thus, we run criterion-based benchmark tests manually.
          ci_run cargo test --manifest-path ./core/Cargo.toml --release -p vm-benchmark --bench oneshot --bench batch

  loadtest:
    runs-on: [ matterlabs-ci-runner-high-performance ]
    strategy:
      fail-fast: false
      matrix:
        vm_mode: [ "OLD", "NEW" ]

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo IN_DOCKER=1 >> .env
          echo "SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage" >> .env
          echo "SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com" >> .env
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> .env
          echo "RUSTC_WRAPPER=sccache" >> .env

      - name: Loadtest configuration
        run: |
          echo EXPECTED_TX_COUNT=${{ matrix.vm_mode == 'NEW' && 30000 || 16000 }} >> .env
          echo ACCOUNTS_AMOUNT="100" >> .env
          echo MAX_INFLIGHT_TXS="10" >> .env
          echo SYNC_API_REQUESTS_LIMIT="15" >> .env
          echo FAIL_FAST=true >> .env
          echo IN_DOCKER=1 >> .env

      - name: Start services
        run: |
          ci_localnet_up
          ci_run sccache --start-server

      - name: Init
        run: |
          ci_run git config --global --add safe.directory /usr/src/zksync
          ci_run git config --global --add safe.directory /usr/src/zksync/sdk/binaryen
          ci_run git config --global --add safe.directory /usr/src/zksync/contracts/system-contracts
          ci_run git config --global --add safe.directory /usr/src/zksync/contracts

      - name: Install zkstack
        run: |
          ci_run ./zkstack_cli/zkstackup/install -g --path ./zkstack_cli/zkstackup/zkstackup || true
          ci_run zkstackup -g --local


      - name: Create and initialize legacy chain
        run: |
          ci_run zkstack chain create \
            --chain-name legacy \
            --chain-id sequential \
            --prover-mode no-proofs \
            --wallet-creation localhost \
            --l1-batch-commit-data-generator-mode rollup \
            --base-token-address 0x0000000000000000000000000000000000000001 \
            --base-token-price-nominator 1 \
            --base-token-price-denominator 1 \
            --set-as-default false \
            --ignore-prerequisites \
            --legacy-bridge \
            --evm-emulator false

          ci_run zkstack ecosystem init --dev --support-l2-legacy-shared-bridge-test true --verbose

      # `sleep 60` because we need to wait until server added all the tokens
      - name: Run server
        run: |
          ci_run zkstack dev config-writer --path ${{ matrix.vm_mode == 'NEW' && 'etc/env/file_based/overrides/tests/loadtest-new.yaml' || 'etc/env/file_based/overrides/tests/loadtest-old.yaml' }} --chain legacy
          ci_run zkstack server --uring --chain=legacy --components api,tree,eth,state_keeper,housekeeper,commitment_generator,vm_runner_protective_reads &>server.log &
          ci_run sleep 60

      - name: Perform loadtest
        run: ci_run zkstack dev t loadtest -v --chain=legacy

      - name: Show server.log logs
        if: always()
        run: ci_run cat server.log || true

      - name: Show sccache logs
        if: always()
        run: |
          ci_run sccache --show-stats || true
          ci_run cat /tmp/sccache_log.txt || true

  integration-tests:
    runs-on: [ matterlabs-ci-runner-ultra-performance ]
    strategy:
      # ----------------------------------------------
      # Note, that while the contracts do support gateway chain
      # in reality it won't exist for quite some time and so
      # we will test both cases here
      # ----------------------------------------------
      matrix:
        use_gateway_chain: [ "WITHOUT_GATEWAY" ]
      # In some cases it's useful to continue one job even if another fails.
      fail-fast: false
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo IN_DOCKER=1 >> .env
          echo "SCCACHE_GCS_BUCKET=matterlabs-infra-sccache-storage" >> .env
          echo "SCCACHE_GCS_SERVICE_ACCOUNT=gha-ci-runners@matterlabs-infra.iam.gserviceaccount.com" >> .env
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> .env
          echo "RUSTC_WRAPPER=sccache" >> .env
          echo "GITHUB_TOKEN=${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}" >> .env
          echo RUN_CONTRACT_VERIFICATION_TEST=true >> $GITHUB_ENV

      - name: Start services
        run: |
          ci_localnet_up

      - name: git config for cloning private repos
        run: |
          ci_run git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf ssh://git@github.com/
          ci_run git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf https://github.com/

      - name: Set safe git directories
        run: |
          ci_run git config --global --add safe.directory /usr/src/zksync
          ci_run git config --global --add safe.directory /usr/src/zksync/contracts/system-contracts
          ci_run git config --global --add safe.directory /usr/src/zksync/contracts

      - name: Install zkstack
        run: |
          ci_run ./zkstack_cli/zkstackup/install -g --path ./zkstack_cli/zkstackup/zkstackup || true
          ci_run zkstackup -g --local

      - name: Create log directories
        run: |
          SERVER_LOGS_DIR=logs/server
          INTEGRATION_TESTS_LOGS_DIR=logs/integration_tests
          INTEGRATION_TESTS_EN_LOGS_DIR=logs/integration_tests/en
          SNAPSHOT_RECOVERY_LOGS_DIR=logs/snapshot_recovery
          GENESIS_RECOVERY_LOGS_DIR=logs/genesis_recovery
          EXTERNAL_NODE_LOGS_DIR=logs/external_node
          FEES_LOGS_DIR=logs/fees
          REVERT_LOGS_DIR=logs/revert

          mkdir -p $SERVER_LOGS_DIR
          mkdir -p $INTEGRATION_TESTS_LOGS_DIR
          mkdir -p $INTEGRATION_TESTS_EN_LOGS_DIR
          mkdir -p $SNAPSHOT_RECOVERY_LOGS_DIR
          mkdir -p $GENESIS_RECOVERY_LOGS_DIR
          mkdir -p $EXTERNAL_NODE_LOGS_DIR
          mkdir -p $FEES_LOGS_DIR
          mkdir -p $REVERT_LOGS_DIR

          echo "SERVER_LOGS_DIR=$SERVER_LOGS_DIR" >> $GITHUB_ENV
          echo "INTEGRATION_TESTS_LOGS_DIR=$INTEGRATION_TESTS_LOGS_DIR" >> $GITHUB_ENV
          echo "INTEGRATION_TESTS_EN_LOGS_DIR=$INTEGRATION_TESTS_EN_LOGS_DIR" >> $GITHUB_ENV
          echo "SNAPSHOT_RECOVERY_LOGS_DIR=$SNAPSHOT_RECOVERY_LOGS_DIR" >> $GITHUB_ENV
          echo "GENESIS_RECOVERY_LOGS_DIR=$GENESIS_RECOVERY_LOGS_DIR" >> $GITHUB_ENV
          echo "EXTERNAL_NODE_LOGS_DIR=$EXTERNAL_NODE_LOGS_DIR" >> $GITHUB_ENV
          echo "FEES_LOGS_DIR=$FEES_LOGS_DIR" >> $GITHUB_ENV
          echo "REVERT_LOGS_DIR=$REVERT_LOGS_DIR" >> $GITHUB_ENV

      - name: Build tested binaries
        run: |
          ci_run zkstack server build
          ci_run zkstack external-node build
          ci_run zkstack contract-verifier build

      - name: Build test dependencies
        run: |
          ci_run zkstack dev test build

      - name: Initialize ecosystem
        run: |
          ci_run zkstack ecosystem init --deploy-paymaster --deploy-erc20 \
          --deploy-ecosystem --l1-rpc-url=http://localhost:8545 \
          --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
          --server-db-name=zksync_server_localhost_era \
          --ignore-prerequisites --verbose \
          --observability=false

      - name: Read Custom Token address and set as environment variable
        run: |
          CUSTOM_TOKEN_ADDRESS=$(awk -F": " '/tokens:/ {found_tokens=1} found_tokens && /DAI:/ {found_dai=1} found_dai && /address:/ {print $2; exit}' ./configs/erc20.yaml)
          echo "CUSTOM_TOKEN_ADDRESS=$CUSTOM_TOKEN_ADDRESS"
          echo "CUSTOM_TOKEN_ADDRESS=$CUSTOM_TOKEN_ADDRESS" >> $GITHUB_ENV

      - name: Export chain list to environment variable
        run: |
          CHAINS="era"
          echo "CHAINS=$CHAINS" >> $GITHUB_ENV

      # ----------------------------------------------------------------
      #  Only create/initialize the gateway chain *if* use_gateway_chain=WITH_GATEWAY
      # ----------------------------------------------------------------
      - name: Initialize gateway chain
        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
        run: |
          ci_run zkstack chain create \
          --chain-name gateway \
          --chain-id 505 \
          --prover-mode no-proofs \
          --wallet-creation localhost \
          --l1-batch-commit-data-generator-mode rollup \
          --base-token-address 0x0000000000000000000000000000000000000001 \
          --base-token-price-nominator 1 \
          --base-token-price-denominator 1 \
          --set-as-default false \
          --ignore-prerequisites \
          --evm-emulator false
          
          ci_run zkstack chain init \
          --deploy-paymaster \
          --l1-rpc-url=http://localhost:8545 \
          --server-db-url=postgres://postgres:notsecurepassword@localhost:5432 \
          --server-db-name=zksync_server_localhost_gateway \
          --chain gateway \
          --validium-type no-da
          
          ci_run zkstack chain gateway convert-to-gateway --chain gateway --ignore-prerequisites

      - name: Run gateway
        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
        run: |
          zkstack dev config-writer --path etc/env/file_based/overrides/tests/gateway.yaml --chain gateway
          ci_run zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
          ci_run zkstack server wait --ignore-prerequisites --verbose --chain gateway

      - name: Migrate chains to gateway
        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
        run: |
          ci_run zkstack dev test gateway-migration --to-gateway  --chain era --no-deps
          ci_run zkstack chain gateway migrate-to-gateway --chain validium --gateway-chain-name gateway
          ci_run zkstack chain gateway migrate-to-gateway --chain custom_token --gateway-chain-name gateway
          ci_run zkstack chain gateway migrate-to-gateway --chain consensus --gateway-chain-name gateway

      - name: Migrate back era
        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
        run: |
          ci_run zkstack dev test gateway-migration --from-gateway --chain era --no-deps

      - name: Migrate to gateway again
        if: matrix.use_gateway_chain == 'WITH_GATEWAY'
        run: |
          ci_run zkstack dev test gateway-migration --to-gateway --chain era --no-deps
          ci_run pkill -9 zksync_server
          ci_run zkstack server --ignore-prerequisites --chain gateway &> ${{ env.SERVER_LOGS_DIR }}/gateway.log &
          ci_run zkstack server wait --ignore-prerequisites --verbose --chain gateway

      - name: Initialize Contract verifier
        run: |
          ci_run zkstack contract-verifier init --zksolc-version=v1.5.10 --zkvyper-version=v1.5.4 --solc-version=0.8.26 --vyper-version=v0.3.10 --era-vm-solc-version=0.8.26-1.0.1 --only --chain era
          ci_run zkstack contract-verifier run --chain era &> ${{ env.SERVER_LOGS_DIR }}/contract-verifier-rollup.log &
          ci_run zkstack contract-verifier wait --chain era --verbose

      - name: Run servers
        run: |
          ci_run zkstack server --ignore-prerequisites --chain era --zkos &> ${{ env.SERVER_LOGS_DIR }}/rollup.log &

          ci_run zkstack server wait --ignore-prerequisites --verbose --chain era

      - name: Run integration tests
        run: |
          ci_run ./bin/run_on_all_chains.sh "zkstack dev test integration --no-deps --ignore-prerequisites -v -t zkos" \
            ${{ env.CHAINS }} ${{ env.INTEGRATION_TESTS_LOGS_DIR }}

      - name: Upload logs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: logs_${{matrix.use_gateway_chain}}
          path: |
            logs/
            chains/*/artifacts/vm_dumps/
