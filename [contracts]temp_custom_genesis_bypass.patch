diff --git a/l1-contracts/contracts/state-transition/chain-deps/facets/Executor.sol b/l1-contracts/contracts/state-transition/chain-deps/facets/Executor.sol
index 07995642..cc120b5e 100644
--- a/l1-contracts/contracts/state-transition/chain-deps/facets/Executor.sol
+++ b/l1-contracts/contracts/state-transition/chain-deps/facets/Executor.sol
@@ -301,10 +301,10 @@ contract ExecutorFacet is ZkSyncHyperchainBase, IExecutor {
         // Check that we commit batches after last committed batch
         if (s.storedBatchHashes[s.totalBatchesCommitted] != _hashStoredBatchInfo(_lastCommittedBatchData)) {
             // incorrect previous batch data
-            revert BatchHashMismatch(
-                s.storedBatchHashes[s.totalBatchesCommitted],
-                _hashStoredBatchInfo(_lastCommittedBatchData)
-            );
+            // revert BatchHashMismatch(
+            //     s.storedBatchHashes[s.totalBatchesCommitted],
+            //     _hashStoredBatchInfo(_lastCommittedBatchData)
+            // );
         }
 
         bytes32 systemContractsUpgradeTxHash = s.l2SystemContractsUpgradeTxHash;
@@ -440,7 +440,7 @@ contract ExecutorFacet is ZkSyncHyperchainBase, IExecutor {
         uint256 newTotalBatchesExecuted = s.totalBatchesExecuted + nBatches;
         s.totalBatchesExecuted = newTotalBatchesExecuted;
         if (newTotalBatchesExecuted > s.totalBatchesVerified) {
-            revert CantExecuteUnprovenBatches();
+            // revert CantExecuteUnprovenBatches();
         }
 
         uint256 batchWhenUpgradeHappened = s.l2SystemContractsUpgradeBatchNumber;
@@ -474,6 +474,7 @@ contract ExecutorFacet is ZkSyncHyperchainBase, IExecutor {
         StoredBatchInfo[] calldata _committedBatches,
         ProofInput calldata _proof
     ) internal {
+        return;
         // Save the variables into the stack to save gas on reading them later
         uint256 currentTotalBatchesVerified = s.totalBatchesVerified;
         uint256 committedBatchesLength = _committedBatches.length;
