// This file is @generated by prost-build.
/// MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
/// See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
/// signed and with which modes.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiSignature {
    #[prost(bytes = "bytes", repeated, tag = "1")]
    pub signatures: ::prost::alloc::vec::Vec<::prost::bytes::Bytes>,
}
impl ::prost::Name for MultiSignature {
    const NAME: &'static str = "MultiSignature";
    const PACKAGE: &'static str = "cosmos.crypto.multisig.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.crypto.multisig.v1beta1.MultiSignature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.crypto.multisig.v1beta1.MultiSignature".into()
    }
}
/// CompactBitArray is an implementation of a space efficient bit array.
/// This is used to ensure that the encoded data takes up a minimal amount of
/// space after proto encoding.
/// This is not thread safe, and is not intended for concurrent usage.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompactBitArray {
    #[prost(uint32, tag = "1")]
    pub extra_bits_stored: u32,
    #[prost(bytes = "bytes", tag = "2")]
    pub elems: ::prost::bytes::Bytes,
}
impl ::prost::Name for CompactBitArray {
    const NAME: &'static str = "CompactBitArray";
    const PACKAGE: &'static str = "cosmos.crypto.multisig.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.crypto.multisig.v1beta1.CompactBitArray".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.crypto.multisig.v1beta1.CompactBitArray".into()
    }
}
