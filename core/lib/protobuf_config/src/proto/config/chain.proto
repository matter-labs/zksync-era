syntax = "proto3";

package zksync.config.chain;


enum FeeModelVersion {
  V1 = 0;
  V2 = 1;
}


message StateKeeper {
  optional uint64 transaction_slots = 1; // required
  optional uint64 block_commit_deadline_ms = 2; // required; ms
  optional uint64 miniblock_commit_deadline_ms = 3; // required; ms
  optional uint64 miniblock_seal_queue_capacity = 4; // required
  optional uint32 max_single_tx_gas = 5; // required; gwei?
  optional uint64 max_allowed_l2_tx_gas_limit = 6; // required; wei?
  optional double reject_tx_at_geometry_percentage = 7; // required; %
  optional double reject_tx_at_eth_params_percentage = 8; // required; %
  optional double reject_tx_at_gas_percentage = 9; // required; %
  optional double close_block_at_geometry_percentage = 10; // required; %
  optional double close_block_at_eth_params_percentage = 11; // required; %
  optional double close_block_at_gas_percentage = 12; // required; %
  optional uint64 minimal_l2_gas_price = 14; // required; wei?
  optional double compute_overhead_part = 15; // required; [0,1]
  optional double pubdata_overhead_part = 16; // required; [0,1]
  optional uint64 batch_overhead_l1_gas = 17; // required; wei?
  optional uint64 max_gas_per_batch = 18; // required; wei?
  optional uint64 max_pubdata_per_batch = 19; // required; bytes?
  optional FeeModelVersion fee_model_version = 20; // required
  optional uint32 validation_computational_gas_limit = 21; // required; wei?
  optional bool save_call_traces = 22; // required
  optional uint64 max_circuits_per_batch = 27; // required
  optional uint64 miniblock_max_payload_size = 28; // required
  reserved 23; reserved "virtual_blocks_interval";
  reserved 24; reserved "virtual_blocks_per_miniblock";
  reserved 26; reserved "enum_index_migration_chunk_size";
}

message OperationsManager {
  optional uint64 delay_interval = 1; // required; ms
}

message Mempool {
  optional uint64 sync_interval_ms = 1; // required; ms
  optional uint64 sync_batch_size = 2; // required; ?
  optional uint64 capacity = 3; // required; ?
  optional uint64 stuck_tx_timeout = 4; // required; s
  optional bool remove_stuck_txs = 5; // required
  optional uint64 delay_interval = 6; // required; ms
}
