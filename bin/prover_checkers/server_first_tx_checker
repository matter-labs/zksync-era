#!/usr/bin/env bash

set -o errexit
set -o pipefail

# Configuration
# DATABASE_URL - The URL of the prover database to connect to
# BATCH_NUMBER - The batch number to check readiness for
# INTERVAL - Time interval for polling in seconds
# TIMEOUT - Timeout of script in seconds

# Start timer
START_TIME=$(date +%s)

# Loop to query periodically
while true; do
    # Calculate the elapsed time
    CURRENT_TIME=$(date +%s)
    ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

    # Check if the timeout has been reached
    if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
        echo "Timeout reached. Failing CI..."
        exit 1  # Exit with non-zero status to fail CI
    fi

    # Run the SQL query and capture the result
    RESULT=$(psql $DATABASE_URL -c "SELECT count(*) FROM transactions;" -t -A)

    # Check if the result is more or equal to 1
    if [ "$RESULT" -ge 1 ]; then
        echo "Query result is more or equal to 1. Success!"
        STATUS=$(psql $DATABASE_URL -c "SELECT count(*), contract_address, l1_batch_number, miniblock_number FROM transactions WHERE l1_batch_number = $BATCH_NUMBER GROUP BY l1_batch_number, contract_address, miniblock_number;" -t -A)
        echo "Current status is $STATUS"
        exit 0  # Exit with zero status to succeed CI
    else
        STATUS=$(psql $DATABASE_URL -c "SELECT count(*), contract_address, l1_batch_number, miniblock_number FROM transactions WHERE l1_batch_number = $BATCH_NUMBER GROUP BY l1_batch_number, contract_address, miniblock_number;" -t -A)
        echo "Current status is $STATUS"
        echo "Retrying in $INTERVAL seconds..."
    fi

    # Wait for the next interval
    sleep $INTERVAL
done
