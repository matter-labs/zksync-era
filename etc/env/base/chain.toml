# ZKsync chain parameters

[chain.eth]
# Name of the used Ethereum network
network = "localhost"
# Name of current ZKsync network
# Used for Sentry environment
zksync_network = "localhost"
# ID of current ZKsync network treated as ETH network ID.
# Used to distinguish ZKsync from other Web3-capable networks.
zksync_network_id = 270

[chain.state_keeper]
fee_account_addr = "0xde03a0B5963f75f1C8485B355fF6D30f3093BDE7"

# Denotes the amount of slots for transactions in the block.
transaction_slots = 250

# 2^50, the maximal allowed gas limit in a batch.
max_allowed_l2_tx_gas_limit = 1125899906842624
block_commit_deadline_ms = 5000
miniblock_commit_deadline_ms = 1000
miniblock_seal_queue_capacity = 10
miniblock_max_payload_size=1000000
# Max gas that can used to include single block in aggregated operation
max_single_tx_gas = 6000000

# Configuration option for block to be sealed in case
# it takes more percentage of the max block capacity than this value.
close_block_at_geometry_percentage = 0.95
# Configuration option for block to be sealed in case
# it takes more percentage of the max block capacity than this value.
close_block_at_eth_params_percentage = 0.95

# Configuration option for block to be sealed in case
# it takes more percentage of the max block capacity than this value.
close_block_at_gas_percentage = 0.95

# Configuration option for tx to be rejected in case
# it takes more percentage of the block capacity than this value.
reject_tx_at_geometry_percentage = 0.95
# Configuration option for block to be sealed in case
# it takes more percentage of the max block capacity than this value.
reject_tx_at_eth_params_percentage = 0.95
# The maximal number of circuits that a batch can support.
# Note, that this number corresponds to the "base layer" circuits, i.e. it does not include
# the recursion layers' circuits.
max_circuits_per_batch = 24100

# Configuration option for block to be sealed in case
# it takes more percentage of the max block gas capacity than this value.
reject_tx_at_gas_percentage = 0.95

# The minimal acceptable L2 gas price, i.e. the price that should include the cost of computation/proving as well
# as potentially premium for congestion.
minimal_l2_gas_price = 100000000

# The constant that represents the possibility that a batch can be sealed because of overuse of computation resources.
# It has range from 0 to 1. If it is 0, the compute will not depend on the cost for closing the batch.
# If it is 1, the gas limit per batch will have to cover the entire cost of closing the batch.
compute_overhead_part = 0.0

# The constant that represents the possibility that a batch can be sealed because of overuse of pubdata.
# It has range from 0 to 1. If it is 0, the pubdata will not depend on the cost for closing the batch.
# If it is 1, the pubdata limit per batch will have to cover the entire cost of closing the batch.
pubdata_overhead_part = 1.0

# The constant amount of L1 gas that is used as the overhead for the batch. It includes the price for batch verification, etc.
batch_overhead_l1_gas = 800000

# The maximum amount of gas that can be used by the batch. This value is derived from the circuits limitation per batch.
max_gas_per_batch = 200000000

# This will also determine how many blobs are used, when enabled.
# If the value is less than 126 kb -> Calldata or 1 Blob
# If the value is > 126 kb and < 252 kb then 2 blobs are used.
# Note, the max at this moment is 252 kb
max_pubdata_per_batch = 100000

# The version of the fee model to use.
# - `V1`, the first model that was used in ZKsync Era. In this fee model, the pubdata price must be pegged to the L1 gas price.
# Also, the fair L2 gas price is expected to only include the proving/computation price for the operator and not the costs that come from
# processing the batch on L1.
# - `V2`, the second model that was used in ZKsync Era. There the pubdata price might be independent from the L1 gas price. Also,
# The fair L2 gas price is expected to both the proving/computation price for the operator and the costs that come from
# processing the batch on L1.
fee_model_version = "V1"

# Max number of computational gas that validation step is allowed to take.
validation_computational_gas_limit = 300000
save_call_traces = true

bootloader_hash = "0x010008e742608b21bf7eb23c1a9d0602047e3618b464c9b59c0fba3b3d7ab66e"
default_aa_hash = "0x01000563374c277a2c1e34659a2a1e87371bb6d852ce142022d497bfb50b9e32"

[chain.operations_manager]
# Sleep time when there is no new input data
delay_interval = 100

[chain.mempool]
delay_interval = 100
sync_interval_ms = 10
sync_batch_size = 1000
capacity = 10_000_000
stuck_tx_timeout = 86400 # 1 day in seconds
remove_stuck_txs = true

[chain.circuit_breaker]
sync_interval_ms = 30000
http_req_max_retry_number = 5
http_req_retry_interval_sec = 2
