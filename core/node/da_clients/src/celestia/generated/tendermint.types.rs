// This file is @generated by prost-build.
/// Blob (named after binary large object) is a chunk of data submitted by a user
/// to be published to the Celestia blockchain. The data of a Blob is published
/// to a namespace and is encoded into shares based on the format specified by
/// share_version.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blob {
    #[prost(bytes = "bytes", tag = "1")]
    pub namespace_id: ::prost::bytes::Bytes,
    #[prost(bytes = "bytes", tag = "2")]
    pub data: ::prost::bytes::Bytes,
    #[prost(uint32, tag = "3")]
    pub share_version: u32,
    #[prost(uint32, tag = "4")]
    pub namespace_version: u32,
}
impl ::prost::Name for Blob {
    const NAME: &'static str = "Blob";
    const PACKAGE: &'static str = "tendermint.types";
    fn full_name() -> ::prost::alloc::string::String {
        "tendermint.types.Blob".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/tendermint.types.Blob".into()
    }
}
/// BlobTx wraps an encoded sdk.Tx with a second field to contain blobs of data.
/// The raw bytes of the blobs are not signed over, instead we verify each blob
/// using the relevant MsgPayForBlobs that is signed over in the encoded sdk.Tx.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlobTx {
    #[prost(bytes = "bytes", tag = "1")]
    pub tx: ::prost::bytes::Bytes,
    #[prost(message, repeated, tag = "2")]
    pub blobs: ::prost::alloc::vec::Vec<Blob>,
    #[prost(string, tag = "3")]
    pub type_id: ::prost::alloc::string::String,
}
impl ::prost::Name for BlobTx {
    const NAME: &'static str = "BlobTx";
    const PACKAGE: &'static str = "tendermint.types";
    fn full_name() -> ::prost::alloc::string::String {
        "tendermint.types.BlobTx".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/tendermint.types.BlobTx".into()
    }
}
