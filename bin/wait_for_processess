#!/bin/bash

# Function to check if a process is still running and get its exit status
check_process_status() {
    local name=$1
    local pid=$2

    # Check if the process is still running
    if kill -0 "$pid" 2>/dev/null; then
        # Process is still running
        return 1
    else
        # Process has finished, try to get its exit status
        if wait "$pid" 2>/dev/null; then
            status=0
        else
            status=$?
        fi

        # Print status message with appropriate color
        if [ "$status" -eq 0 ]; then
            echo -e "\e[32m$name (PID $pid) completed successfully.\e[0m"  # Green for success
        else
            echo -e "\e[31m$name (PID $pid) failed with exit status $status.\e[0m"  # Red for failure
        fi
        return 0
    fi
}

# Loop through each process, monitor, and store the PIDs of the background jobs
for entry in $1; do
    name="${entry%%:*}"
    pid="${entry##*:}"

    # Continuously check the process status
  while true; do
    check_process_status "$name" "$pid"
    if [[ "$?" -eq 0 ]]; then
      break
    fi
    sleep 1
  done &
done

# Wait for all background jobs to complete
wait